Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    NOT

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM IDENTIFIER LBRACE declarations statements RBRACE
Rule 2     declarations -> declarations declaration
Rule 3     declarations -> empty
Rule 4     declaration -> type IDENTIFIER SEMICOLON
Rule 5     declaration -> type IDENTIFIER COMMA identifiers SEMICOLON
Rule 6     declaration -> CONST IDENTIFIER ASSIGN expression SEMICOLON
Rule 7     type -> INT
Rule 8     type -> FLOAT
Rule 9     type -> STR
Rule 10    type -> BOOL
Rule 11    identifiers -> IDENTIFIER
Rule 12    identifiers -> IDENTIFIER COMMA identifiers
Rule 13    statements -> statements statement
Rule 14    statements -> statement
Rule 15    statement -> declaration
Rule 16    statement -> assignment
Rule 17    statement -> if_statement
Rule 18    statement -> while_statement
Rule 19    statement -> print_statement
Rule 20    statement -> input_statement
Rule 21    statement -> function_call
Rule 22    assignment -> IDENTIFIER ASSIGN expression SEMICOLON
Rule 23    expression -> INTEGER_LITERAL
Rule 24    expression -> FLOAT_LITERAL
Rule 25    expression -> STRING_LITERAL
Rule 26    expression -> IDENTIFIER
Rule 27    expression -> TRUE
Rule 28    expression -> FALSE
Rule 29    expression -> LPAREN expression RPAREN
Rule 30    expression -> expression PLUS expression
Rule 31    expression -> expression MINUS expression
Rule 32    expression -> expression MULTIPLY expression
Rule 33    expression -> expression DIVIDE expression
Rule 34    expression -> expression EQUAL expression
Rule 35    expression -> expression NOTEQUAL expression
Rule 36    expression -> expression GREATER expression
Rule 37    expression -> expression LESS expression
Rule 38    expression -> expression GREATER_EQUAL expression
Rule 39    expression -> expression LESS_EQUAL expression
Rule 40    if_statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE else_statement
Rule 41    else_statement -> ELSE LBRACE statements RBRACE
Rule 42    else_statement -> empty
Rule 43    while_statement -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE
Rule 44    print_statement -> PRINT LPAREN expression RPAREN SEMICOLON
Rule 45    print_statement -> PRINT LPAREN expression COMMA expression RPAREN SEMICOLON
Rule 46    input_statement -> INPUT LPAREN IDENTIFIER RPAREN SEMICOLON
Rule 47    function_call -> IDENTIFIER LPAREN argument_list RPAREN SEMICOLON
Rule 48    argument_list -> expression
Rule 49    argument_list -> expression COMMA argument_list
Rule 50    argument_list -> empty
Rule 51    empty -> <empty>

Terminals, with rules where they appear

ASSIGN               : 6 22
BOOL                 : 10
COMMA                : 5 12 45 49
CONST                : 6
DIVIDE               : 33
ELSE                 : 41
EQUAL                : 34
FALSE                : 28
FLOAT                : 8
FLOAT_LITERAL        : 24
GREATER              : 36
GREATER_EQUAL        : 38
IDENTIFIER           : 1 4 5 6 11 12 22 26 46 47
IF                   : 40
INPUT                : 46
INT                  : 7
INTEGER_LITERAL      : 23
LBRACE               : 1 40 41 43
LESS                 : 37
LESS_EQUAL           : 39
LPAREN               : 29 40 43 44 45 46 47
MINUS                : 31
MULTIPLY             : 32
NOT                  : 
NOTEQUAL             : 35
PLUS                 : 30
PRINT                : 44 45
PROGRAM              : 1
RBRACE               : 1 40 41 43
RPAREN               : 29 40 43 44 45 46 47
SEMICOLON            : 4 5 6 22 44 45 46 47
STR                  : 9
STRING_LITERAL       : 25
TRUE                 : 27
WHILE                : 43
error                : 

Nonterminals, with rules where they appear

argument_list        : 47 49
assignment           : 16
declaration          : 2 15
declarations         : 1 2
else_statement       : 40
empty                : 3 42 50
expression           : 6 22 29 30 30 31 31 32 32 33 33 34 34 35 35 36 36 37 37 38 38 39 39 40 43 44 45 45 48 49
function_call        : 21
identifiers          : 5 12
if_statement         : 17
input_statement      : 20
print_statement      : 19
program              : 0
statement            : 13 14
statements           : 1 13 40 41 43
type                 : 4 5
while_statement      : 18

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM IDENTIFIER LBRACE declarations statements RBRACE

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . IDENTIFIER LBRACE declarations statements RBRACE

    IDENTIFIER      shift and go to state 3


state 3

    (1) program -> PROGRAM IDENTIFIER . LBRACE declarations statements RBRACE

    LBRACE          shift and go to state 4


state 4

    (1) program -> PROGRAM IDENTIFIER LBRACE . declarations statements RBRACE
    (2) declarations -> . declarations declaration
    (3) declarations -> . empty
    (51) empty -> .

    CONST           reduce using rule 51 (empty -> .)
    INT             reduce using rule 51 (empty -> .)
    FLOAT           reduce using rule 51 (empty -> .)
    STR             reduce using rule 51 (empty -> .)
    BOOL            reduce using rule 51 (empty -> .)
    IDENTIFIER      reduce using rule 51 (empty -> .)
    IF              reduce using rule 51 (empty -> .)
    WHILE           reduce using rule 51 (empty -> .)
    PRINT           reduce using rule 51 (empty -> .)
    INPUT           reduce using rule 51 (empty -> .)

    declarations                   shift and go to state 5
    empty                          shift and go to state 6

state 5

    (1) program -> PROGRAM IDENTIFIER LBRACE declarations . statements RBRACE
    (2) declarations -> declarations . declaration
    (13) statements -> . statements statement
    (14) statements -> . statement
    (4) declaration -> . type IDENTIFIER SEMICOLON
    (5) declaration -> . type IDENTIFIER COMMA identifiers SEMICOLON
    (6) declaration -> . CONST IDENTIFIER ASSIGN expression SEMICOLON
    (15) statement -> . declaration
    (16) statement -> . assignment
    (17) statement -> . if_statement
    (18) statement -> . while_statement
    (19) statement -> . print_statement
    (20) statement -> . input_statement
    (21) statement -> . function_call
    (7) type -> . INT
    (8) type -> . FLOAT
    (9) type -> . STR
    (10) type -> . BOOL
    (22) assignment -> . IDENTIFIER ASSIGN expression SEMICOLON
    (40) if_statement -> . IF LPAREN expression RPAREN LBRACE statements RBRACE else_statement
    (43) while_statement -> . WHILE LPAREN expression RPAREN LBRACE statements RBRACE
    (44) print_statement -> . PRINT LPAREN expression RPAREN SEMICOLON
    (45) print_statement -> . PRINT LPAREN expression COMMA expression RPAREN SEMICOLON
    (46) input_statement -> . INPUT LPAREN IDENTIFIER RPAREN SEMICOLON
    (47) function_call -> . IDENTIFIER LPAREN argument_list RPAREN SEMICOLON

    CONST           shift and go to state 12
    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    STR             shift and go to state 21
    BOOL            shift and go to state 22
    IDENTIFIER      shift and go to state 7
    IF              shift and go to state 23
    WHILE           shift and go to state 24
    PRINT           shift and go to state 25
    INPUT           shift and go to state 26

    statements                     shift and go to state 8
    declaration                    shift and go to state 9
    statement                      shift and go to state 10
    type                           shift and go to state 11
    assignment                     shift and go to state 13
    if_statement                   shift and go to state 14
    while_statement                shift and go to state 15
    print_statement                shift and go to state 16
    input_statement                shift and go to state 17
    function_call                  shift and go to state 18

state 6

    (3) declarations -> empty .

    CONST           reduce using rule 3 (declarations -> empty .)
    INT             reduce using rule 3 (declarations -> empty .)
    FLOAT           reduce using rule 3 (declarations -> empty .)
    STR             reduce using rule 3 (declarations -> empty .)
    BOOL            reduce using rule 3 (declarations -> empty .)
    IDENTIFIER      reduce using rule 3 (declarations -> empty .)
    IF              reduce using rule 3 (declarations -> empty .)
    WHILE           reduce using rule 3 (declarations -> empty .)
    PRINT           reduce using rule 3 (declarations -> empty .)
    INPUT           reduce using rule 3 (declarations -> empty .)


state 7

    (22) assignment -> IDENTIFIER . ASSIGN expression SEMICOLON
    (47) function_call -> IDENTIFIER . LPAREN argument_list RPAREN SEMICOLON

    ASSIGN          shift and go to state 27
    LPAREN          shift and go to state 28


state 8

    (1) program -> PROGRAM IDENTIFIER LBRACE declarations statements . RBRACE
    (13) statements -> statements . statement
    (15) statement -> . declaration
    (16) statement -> . assignment
    (17) statement -> . if_statement
    (18) statement -> . while_statement
    (19) statement -> . print_statement
    (20) statement -> . input_statement
    (21) statement -> . function_call
    (4) declaration -> . type IDENTIFIER SEMICOLON
    (5) declaration -> . type IDENTIFIER COMMA identifiers SEMICOLON
    (6) declaration -> . CONST IDENTIFIER ASSIGN expression SEMICOLON
    (22) assignment -> . IDENTIFIER ASSIGN expression SEMICOLON
    (40) if_statement -> . IF LPAREN expression RPAREN LBRACE statements RBRACE else_statement
    (43) while_statement -> . WHILE LPAREN expression RPAREN LBRACE statements RBRACE
    (44) print_statement -> . PRINT LPAREN expression RPAREN SEMICOLON
    (45) print_statement -> . PRINT LPAREN expression COMMA expression RPAREN SEMICOLON
    (46) input_statement -> . INPUT LPAREN IDENTIFIER RPAREN SEMICOLON
    (47) function_call -> . IDENTIFIER LPAREN argument_list RPAREN SEMICOLON
    (7) type -> . INT
    (8) type -> . FLOAT
    (9) type -> . STR
    (10) type -> . BOOL

    RBRACE          shift and go to state 29
    CONST           shift and go to state 12
    IDENTIFIER      shift and go to state 7
    IF              shift and go to state 23
    WHILE           shift and go to state 24
    PRINT           shift and go to state 25
    INPUT           shift and go to state 26
    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    STR             shift and go to state 21
    BOOL            shift and go to state 22

    statement                      shift and go to state 30
    declaration                    shift and go to state 31
    assignment                     shift and go to state 13
    if_statement                   shift and go to state 14
    while_statement                shift and go to state 15
    print_statement                shift and go to state 16
    input_statement                shift and go to state 17
    function_call                  shift and go to state 18
    type                           shift and go to state 11

state 9

    (2) declarations -> declarations declaration .
    (15) statement -> declaration .

  ! reduce/reduce conflict for CONST resolved using rule 2 (declarations -> declarations declaration .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 2 (declarations -> declarations declaration .)
  ! reduce/reduce conflict for IF resolved using rule 2 (declarations -> declarations declaration .)
  ! reduce/reduce conflict for WHILE resolved using rule 2 (declarations -> declarations declaration .)
  ! reduce/reduce conflict for PRINT resolved using rule 2 (declarations -> declarations declaration .)
  ! reduce/reduce conflict for INPUT resolved using rule 2 (declarations -> declarations declaration .)
  ! reduce/reduce conflict for INT resolved using rule 2 (declarations -> declarations declaration .)
  ! reduce/reduce conflict for FLOAT resolved using rule 2 (declarations -> declarations declaration .)
  ! reduce/reduce conflict for STR resolved using rule 2 (declarations -> declarations declaration .)
  ! reduce/reduce conflict for BOOL resolved using rule 2 (declarations -> declarations declaration .)
    CONST           reduce using rule 2 (declarations -> declarations declaration .)
    INT             reduce using rule 2 (declarations -> declarations declaration .)
    FLOAT           reduce using rule 2 (declarations -> declarations declaration .)
    STR             reduce using rule 2 (declarations -> declarations declaration .)
    BOOL            reduce using rule 2 (declarations -> declarations declaration .)
    IDENTIFIER      reduce using rule 2 (declarations -> declarations declaration .)
    IF              reduce using rule 2 (declarations -> declarations declaration .)
    WHILE           reduce using rule 2 (declarations -> declarations declaration .)
    PRINT           reduce using rule 2 (declarations -> declarations declaration .)
    INPUT           reduce using rule 2 (declarations -> declarations declaration .)
    RBRACE          reduce using rule 15 (statement -> declaration .)

  ! CONST           [ reduce using rule 15 (statement -> declaration .) ]
  ! IDENTIFIER      [ reduce using rule 15 (statement -> declaration .) ]
  ! IF              [ reduce using rule 15 (statement -> declaration .) ]
  ! WHILE           [ reduce using rule 15 (statement -> declaration .) ]
  ! PRINT           [ reduce using rule 15 (statement -> declaration .) ]
  ! INPUT           [ reduce using rule 15 (statement -> declaration .) ]
  ! INT             [ reduce using rule 15 (statement -> declaration .) ]
  ! FLOAT           [ reduce using rule 15 (statement -> declaration .) ]
  ! STR             [ reduce using rule 15 (statement -> declaration .) ]
  ! BOOL            [ reduce using rule 15 (statement -> declaration .) ]


state 10

    (14) statements -> statement .

    RBRACE          reduce using rule 14 (statements -> statement .)
    CONST           reduce using rule 14 (statements -> statement .)
    IDENTIFIER      reduce using rule 14 (statements -> statement .)
    IF              reduce using rule 14 (statements -> statement .)
    WHILE           reduce using rule 14 (statements -> statement .)
    PRINT           reduce using rule 14 (statements -> statement .)
    INPUT           reduce using rule 14 (statements -> statement .)
    INT             reduce using rule 14 (statements -> statement .)
    FLOAT           reduce using rule 14 (statements -> statement .)
    STR             reduce using rule 14 (statements -> statement .)
    BOOL            reduce using rule 14 (statements -> statement .)


state 11

    (4) declaration -> type . IDENTIFIER SEMICOLON
    (5) declaration -> type . IDENTIFIER COMMA identifiers SEMICOLON

    IDENTIFIER      shift and go to state 32


state 12

    (6) declaration -> CONST . IDENTIFIER ASSIGN expression SEMICOLON

    IDENTIFIER      shift and go to state 33


state 13

    (16) statement -> assignment .

    RBRACE          reduce using rule 16 (statement -> assignment .)
    CONST           reduce using rule 16 (statement -> assignment .)
    IDENTIFIER      reduce using rule 16 (statement -> assignment .)
    IF              reduce using rule 16 (statement -> assignment .)
    WHILE           reduce using rule 16 (statement -> assignment .)
    PRINT           reduce using rule 16 (statement -> assignment .)
    INPUT           reduce using rule 16 (statement -> assignment .)
    INT             reduce using rule 16 (statement -> assignment .)
    FLOAT           reduce using rule 16 (statement -> assignment .)
    STR             reduce using rule 16 (statement -> assignment .)
    BOOL            reduce using rule 16 (statement -> assignment .)


state 14

    (17) statement -> if_statement .

    RBRACE          reduce using rule 17 (statement -> if_statement .)
    CONST           reduce using rule 17 (statement -> if_statement .)
    IDENTIFIER      reduce using rule 17 (statement -> if_statement .)
    IF              reduce using rule 17 (statement -> if_statement .)
    WHILE           reduce using rule 17 (statement -> if_statement .)
    PRINT           reduce using rule 17 (statement -> if_statement .)
    INPUT           reduce using rule 17 (statement -> if_statement .)
    INT             reduce using rule 17 (statement -> if_statement .)
    FLOAT           reduce using rule 17 (statement -> if_statement .)
    STR             reduce using rule 17 (statement -> if_statement .)
    BOOL            reduce using rule 17 (statement -> if_statement .)


state 15

    (18) statement -> while_statement .

    RBRACE          reduce using rule 18 (statement -> while_statement .)
    CONST           reduce using rule 18 (statement -> while_statement .)
    IDENTIFIER      reduce using rule 18 (statement -> while_statement .)
    IF              reduce using rule 18 (statement -> while_statement .)
    WHILE           reduce using rule 18 (statement -> while_statement .)
    PRINT           reduce using rule 18 (statement -> while_statement .)
    INPUT           reduce using rule 18 (statement -> while_statement .)
    INT             reduce using rule 18 (statement -> while_statement .)
    FLOAT           reduce using rule 18 (statement -> while_statement .)
    STR             reduce using rule 18 (statement -> while_statement .)
    BOOL            reduce using rule 18 (statement -> while_statement .)


state 16

    (19) statement -> print_statement .

    RBRACE          reduce using rule 19 (statement -> print_statement .)
    CONST           reduce using rule 19 (statement -> print_statement .)
    IDENTIFIER      reduce using rule 19 (statement -> print_statement .)
    IF              reduce using rule 19 (statement -> print_statement .)
    WHILE           reduce using rule 19 (statement -> print_statement .)
    PRINT           reduce using rule 19 (statement -> print_statement .)
    INPUT           reduce using rule 19 (statement -> print_statement .)
    INT             reduce using rule 19 (statement -> print_statement .)
    FLOAT           reduce using rule 19 (statement -> print_statement .)
    STR             reduce using rule 19 (statement -> print_statement .)
    BOOL            reduce using rule 19 (statement -> print_statement .)


state 17

    (20) statement -> input_statement .

    RBRACE          reduce using rule 20 (statement -> input_statement .)
    CONST           reduce using rule 20 (statement -> input_statement .)
    IDENTIFIER      reduce using rule 20 (statement -> input_statement .)
    IF              reduce using rule 20 (statement -> input_statement .)
    WHILE           reduce using rule 20 (statement -> input_statement .)
    PRINT           reduce using rule 20 (statement -> input_statement .)
    INPUT           reduce using rule 20 (statement -> input_statement .)
    INT             reduce using rule 20 (statement -> input_statement .)
    FLOAT           reduce using rule 20 (statement -> input_statement .)
    STR             reduce using rule 20 (statement -> input_statement .)
    BOOL            reduce using rule 20 (statement -> input_statement .)


state 18

    (21) statement -> function_call .

    RBRACE          reduce using rule 21 (statement -> function_call .)
    CONST           reduce using rule 21 (statement -> function_call .)
    IDENTIFIER      reduce using rule 21 (statement -> function_call .)
    IF              reduce using rule 21 (statement -> function_call .)
    WHILE           reduce using rule 21 (statement -> function_call .)
    PRINT           reduce using rule 21 (statement -> function_call .)
    INPUT           reduce using rule 21 (statement -> function_call .)
    INT             reduce using rule 21 (statement -> function_call .)
    FLOAT           reduce using rule 21 (statement -> function_call .)
    STR             reduce using rule 21 (statement -> function_call .)
    BOOL            reduce using rule 21 (statement -> function_call .)


state 19

    (7) type -> INT .

    IDENTIFIER      reduce using rule 7 (type -> INT .)


state 20

    (8) type -> FLOAT .

    IDENTIFIER      reduce using rule 8 (type -> FLOAT .)


state 21

    (9) type -> STR .

    IDENTIFIER      reduce using rule 9 (type -> STR .)


state 22

    (10) type -> BOOL .

    IDENTIFIER      reduce using rule 10 (type -> BOOL .)


state 23

    (40) if_statement -> IF . LPAREN expression RPAREN LBRACE statements RBRACE else_statement

    LPAREN          shift and go to state 34


state 24

    (43) while_statement -> WHILE . LPAREN expression RPAREN LBRACE statements RBRACE

    LPAREN          shift and go to state 35


state 25

    (44) print_statement -> PRINT . LPAREN expression RPAREN SEMICOLON
    (45) print_statement -> PRINT . LPAREN expression COMMA expression RPAREN SEMICOLON

    LPAREN          shift and go to state 36


state 26

    (46) input_statement -> INPUT . LPAREN IDENTIFIER RPAREN SEMICOLON

    LPAREN          shift and go to state 37


state 27

    (22) assignment -> IDENTIFIER ASSIGN . expression SEMICOLON
    (23) expression -> . INTEGER_LITERAL
    (24) expression -> . FLOAT_LITERAL
    (25) expression -> . STRING_LITERAL
    (26) expression -> . IDENTIFIER
    (27) expression -> . TRUE
    (28) expression -> . FALSE
    (29) expression -> . LPAREN expression RPAREN
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (32) expression -> . expression MULTIPLY expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression EQUAL expression
    (35) expression -> . expression NOTEQUAL expression
    (36) expression -> . expression GREATER expression
    (37) expression -> . expression LESS expression
    (38) expression -> . expression GREATER_EQUAL expression
    (39) expression -> . expression LESS_EQUAL expression

    INTEGER_LITERAL shift and go to state 40
    FLOAT_LITERAL   shift and go to state 41
    STRING_LITERAL  shift and go to state 42
    IDENTIFIER      shift and go to state 38
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44
    LPAREN          shift and go to state 45

    expression                     shift and go to state 39

state 28

    (47) function_call -> IDENTIFIER LPAREN . argument_list RPAREN SEMICOLON
    (48) argument_list -> . expression
    (49) argument_list -> . expression COMMA argument_list
    (50) argument_list -> . empty
    (23) expression -> . INTEGER_LITERAL
    (24) expression -> . FLOAT_LITERAL
    (25) expression -> . STRING_LITERAL
    (26) expression -> . IDENTIFIER
    (27) expression -> . TRUE
    (28) expression -> . FALSE
    (29) expression -> . LPAREN expression RPAREN
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (32) expression -> . expression MULTIPLY expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression EQUAL expression
    (35) expression -> . expression NOTEQUAL expression
    (36) expression -> . expression GREATER expression
    (37) expression -> . expression LESS expression
    (38) expression -> . expression GREATER_EQUAL expression
    (39) expression -> . expression LESS_EQUAL expression
    (51) empty -> .

    INTEGER_LITERAL shift and go to state 40
    FLOAT_LITERAL   shift and go to state 41
    STRING_LITERAL  shift and go to state 42
    IDENTIFIER      shift and go to state 38
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44
    LPAREN          shift and go to state 45
    RPAREN          reduce using rule 51 (empty -> .)

    argument_list                  shift and go to state 46
    expression                     shift and go to state 47
    empty                          shift and go to state 48

state 29

    (1) program -> PROGRAM IDENTIFIER LBRACE declarations statements RBRACE .

    $end            reduce using rule 1 (program -> PROGRAM IDENTIFIER LBRACE declarations statements RBRACE .)


state 30

    (13) statements -> statements statement .

    RBRACE          reduce using rule 13 (statements -> statements statement .)
    CONST           reduce using rule 13 (statements -> statements statement .)
    IDENTIFIER      reduce using rule 13 (statements -> statements statement .)
    IF              reduce using rule 13 (statements -> statements statement .)
    WHILE           reduce using rule 13 (statements -> statements statement .)
    PRINT           reduce using rule 13 (statements -> statements statement .)
    INPUT           reduce using rule 13 (statements -> statements statement .)
    INT             reduce using rule 13 (statements -> statements statement .)
    FLOAT           reduce using rule 13 (statements -> statements statement .)
    STR             reduce using rule 13 (statements -> statements statement .)
    BOOL            reduce using rule 13 (statements -> statements statement .)


state 31

    (15) statement -> declaration .

    RBRACE          reduce using rule 15 (statement -> declaration .)
    CONST           reduce using rule 15 (statement -> declaration .)
    IDENTIFIER      reduce using rule 15 (statement -> declaration .)
    IF              reduce using rule 15 (statement -> declaration .)
    WHILE           reduce using rule 15 (statement -> declaration .)
    PRINT           reduce using rule 15 (statement -> declaration .)
    INPUT           reduce using rule 15 (statement -> declaration .)
    INT             reduce using rule 15 (statement -> declaration .)
    FLOAT           reduce using rule 15 (statement -> declaration .)
    STR             reduce using rule 15 (statement -> declaration .)
    BOOL            reduce using rule 15 (statement -> declaration .)


state 32

    (4) declaration -> type IDENTIFIER . SEMICOLON
    (5) declaration -> type IDENTIFIER . COMMA identifiers SEMICOLON

    SEMICOLON       shift and go to state 49
    COMMA           shift and go to state 50


state 33

    (6) declaration -> CONST IDENTIFIER . ASSIGN expression SEMICOLON

    ASSIGN          shift and go to state 51


state 34

    (40) if_statement -> IF LPAREN . expression RPAREN LBRACE statements RBRACE else_statement
    (23) expression -> . INTEGER_LITERAL
    (24) expression -> . FLOAT_LITERAL
    (25) expression -> . STRING_LITERAL
    (26) expression -> . IDENTIFIER
    (27) expression -> . TRUE
    (28) expression -> . FALSE
    (29) expression -> . LPAREN expression RPAREN
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (32) expression -> . expression MULTIPLY expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression EQUAL expression
    (35) expression -> . expression NOTEQUAL expression
    (36) expression -> . expression GREATER expression
    (37) expression -> . expression LESS expression
    (38) expression -> . expression GREATER_EQUAL expression
    (39) expression -> . expression LESS_EQUAL expression

    INTEGER_LITERAL shift and go to state 40
    FLOAT_LITERAL   shift and go to state 41
    STRING_LITERAL  shift and go to state 42
    IDENTIFIER      shift and go to state 38
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44
    LPAREN          shift and go to state 45

    expression                     shift and go to state 52

state 35

    (43) while_statement -> WHILE LPAREN . expression RPAREN LBRACE statements RBRACE
    (23) expression -> . INTEGER_LITERAL
    (24) expression -> . FLOAT_LITERAL
    (25) expression -> . STRING_LITERAL
    (26) expression -> . IDENTIFIER
    (27) expression -> . TRUE
    (28) expression -> . FALSE
    (29) expression -> . LPAREN expression RPAREN
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (32) expression -> . expression MULTIPLY expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression EQUAL expression
    (35) expression -> . expression NOTEQUAL expression
    (36) expression -> . expression GREATER expression
    (37) expression -> . expression LESS expression
    (38) expression -> . expression GREATER_EQUAL expression
    (39) expression -> . expression LESS_EQUAL expression

    INTEGER_LITERAL shift and go to state 40
    FLOAT_LITERAL   shift and go to state 41
    STRING_LITERAL  shift and go to state 42
    IDENTIFIER      shift and go to state 38
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44
    LPAREN          shift and go to state 45

    expression                     shift and go to state 53

state 36

    (44) print_statement -> PRINT LPAREN . expression RPAREN SEMICOLON
    (45) print_statement -> PRINT LPAREN . expression COMMA expression RPAREN SEMICOLON
    (23) expression -> . INTEGER_LITERAL
    (24) expression -> . FLOAT_LITERAL
    (25) expression -> . STRING_LITERAL
    (26) expression -> . IDENTIFIER
    (27) expression -> . TRUE
    (28) expression -> . FALSE
    (29) expression -> . LPAREN expression RPAREN
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (32) expression -> . expression MULTIPLY expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression EQUAL expression
    (35) expression -> . expression NOTEQUAL expression
    (36) expression -> . expression GREATER expression
    (37) expression -> . expression LESS expression
    (38) expression -> . expression GREATER_EQUAL expression
    (39) expression -> . expression LESS_EQUAL expression

    INTEGER_LITERAL shift and go to state 40
    FLOAT_LITERAL   shift and go to state 41
    STRING_LITERAL  shift and go to state 42
    IDENTIFIER      shift and go to state 38
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44
    LPAREN          shift and go to state 45

    expression                     shift and go to state 54

state 37

    (46) input_statement -> INPUT LPAREN . IDENTIFIER RPAREN SEMICOLON

    IDENTIFIER      shift and go to state 55


state 38

    (26) expression -> IDENTIFIER .

    SEMICOLON       reduce using rule 26 (expression -> IDENTIFIER .)
    PLUS            reduce using rule 26 (expression -> IDENTIFIER .)
    MINUS           reduce using rule 26 (expression -> IDENTIFIER .)
    MULTIPLY        reduce using rule 26 (expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 26 (expression -> IDENTIFIER .)
    EQUAL           reduce using rule 26 (expression -> IDENTIFIER .)
    NOTEQUAL        reduce using rule 26 (expression -> IDENTIFIER .)
    GREATER         reduce using rule 26 (expression -> IDENTIFIER .)
    LESS            reduce using rule 26 (expression -> IDENTIFIER .)
    GREATER_EQUAL   reduce using rule 26 (expression -> IDENTIFIER .)
    LESS_EQUAL      reduce using rule 26 (expression -> IDENTIFIER .)
    COMMA           reduce using rule 26 (expression -> IDENTIFIER .)
    RPAREN          reduce using rule 26 (expression -> IDENTIFIER .)


state 39

    (22) assignment -> IDENTIFIER ASSIGN expression . SEMICOLON
    (30) expression -> expression . PLUS expression
    (31) expression -> expression . MINUS expression
    (32) expression -> expression . MULTIPLY expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . EQUAL expression
    (35) expression -> expression . NOTEQUAL expression
    (36) expression -> expression . GREATER expression
    (37) expression -> expression . LESS expression
    (38) expression -> expression . GREATER_EQUAL expression
    (39) expression -> expression . LESS_EQUAL expression

    SEMICOLON       shift and go to state 56
    PLUS            shift and go to state 57
    MINUS           shift and go to state 58
    MULTIPLY        shift and go to state 59
    DIVIDE          shift and go to state 60
    EQUAL           shift and go to state 61
    NOTEQUAL        shift and go to state 62
    GREATER         shift and go to state 63
    LESS            shift and go to state 64
    GREATER_EQUAL   shift and go to state 65
    LESS_EQUAL      shift and go to state 66


state 40

    (23) expression -> INTEGER_LITERAL .

    SEMICOLON       reduce using rule 23 (expression -> INTEGER_LITERAL .)
    PLUS            reduce using rule 23 (expression -> INTEGER_LITERAL .)
    MINUS           reduce using rule 23 (expression -> INTEGER_LITERAL .)
    MULTIPLY        reduce using rule 23 (expression -> INTEGER_LITERAL .)
    DIVIDE          reduce using rule 23 (expression -> INTEGER_LITERAL .)
    EQUAL           reduce using rule 23 (expression -> INTEGER_LITERAL .)
    NOTEQUAL        reduce using rule 23 (expression -> INTEGER_LITERAL .)
    GREATER         reduce using rule 23 (expression -> INTEGER_LITERAL .)
    LESS            reduce using rule 23 (expression -> INTEGER_LITERAL .)
    GREATER_EQUAL   reduce using rule 23 (expression -> INTEGER_LITERAL .)
    LESS_EQUAL      reduce using rule 23 (expression -> INTEGER_LITERAL .)
    COMMA           reduce using rule 23 (expression -> INTEGER_LITERAL .)
    RPAREN          reduce using rule 23 (expression -> INTEGER_LITERAL .)


state 41

    (24) expression -> FLOAT_LITERAL .

    SEMICOLON       reduce using rule 24 (expression -> FLOAT_LITERAL .)
    PLUS            reduce using rule 24 (expression -> FLOAT_LITERAL .)
    MINUS           reduce using rule 24 (expression -> FLOAT_LITERAL .)
    MULTIPLY        reduce using rule 24 (expression -> FLOAT_LITERAL .)
    DIVIDE          reduce using rule 24 (expression -> FLOAT_LITERAL .)
    EQUAL           reduce using rule 24 (expression -> FLOAT_LITERAL .)
    NOTEQUAL        reduce using rule 24 (expression -> FLOAT_LITERAL .)
    GREATER         reduce using rule 24 (expression -> FLOAT_LITERAL .)
    LESS            reduce using rule 24 (expression -> FLOAT_LITERAL .)
    GREATER_EQUAL   reduce using rule 24 (expression -> FLOAT_LITERAL .)
    LESS_EQUAL      reduce using rule 24 (expression -> FLOAT_LITERAL .)
    COMMA           reduce using rule 24 (expression -> FLOAT_LITERAL .)
    RPAREN          reduce using rule 24 (expression -> FLOAT_LITERAL .)


state 42

    (25) expression -> STRING_LITERAL .

    SEMICOLON       reduce using rule 25 (expression -> STRING_LITERAL .)
    PLUS            reduce using rule 25 (expression -> STRING_LITERAL .)
    MINUS           reduce using rule 25 (expression -> STRING_LITERAL .)
    MULTIPLY        reduce using rule 25 (expression -> STRING_LITERAL .)
    DIVIDE          reduce using rule 25 (expression -> STRING_LITERAL .)
    EQUAL           reduce using rule 25 (expression -> STRING_LITERAL .)
    NOTEQUAL        reduce using rule 25 (expression -> STRING_LITERAL .)
    GREATER         reduce using rule 25 (expression -> STRING_LITERAL .)
    LESS            reduce using rule 25 (expression -> STRING_LITERAL .)
    GREATER_EQUAL   reduce using rule 25 (expression -> STRING_LITERAL .)
    LESS_EQUAL      reduce using rule 25 (expression -> STRING_LITERAL .)
    COMMA           reduce using rule 25 (expression -> STRING_LITERAL .)
    RPAREN          reduce using rule 25 (expression -> STRING_LITERAL .)


state 43

    (27) expression -> TRUE .

    SEMICOLON       reduce using rule 27 (expression -> TRUE .)
    PLUS            reduce using rule 27 (expression -> TRUE .)
    MINUS           reduce using rule 27 (expression -> TRUE .)
    MULTIPLY        reduce using rule 27 (expression -> TRUE .)
    DIVIDE          reduce using rule 27 (expression -> TRUE .)
    EQUAL           reduce using rule 27 (expression -> TRUE .)
    NOTEQUAL        reduce using rule 27 (expression -> TRUE .)
    GREATER         reduce using rule 27 (expression -> TRUE .)
    LESS            reduce using rule 27 (expression -> TRUE .)
    GREATER_EQUAL   reduce using rule 27 (expression -> TRUE .)
    LESS_EQUAL      reduce using rule 27 (expression -> TRUE .)
    COMMA           reduce using rule 27 (expression -> TRUE .)
    RPAREN          reduce using rule 27 (expression -> TRUE .)


state 44

    (28) expression -> FALSE .

    SEMICOLON       reduce using rule 28 (expression -> FALSE .)
    PLUS            reduce using rule 28 (expression -> FALSE .)
    MINUS           reduce using rule 28 (expression -> FALSE .)
    MULTIPLY        reduce using rule 28 (expression -> FALSE .)
    DIVIDE          reduce using rule 28 (expression -> FALSE .)
    EQUAL           reduce using rule 28 (expression -> FALSE .)
    NOTEQUAL        reduce using rule 28 (expression -> FALSE .)
    GREATER         reduce using rule 28 (expression -> FALSE .)
    LESS            reduce using rule 28 (expression -> FALSE .)
    GREATER_EQUAL   reduce using rule 28 (expression -> FALSE .)
    LESS_EQUAL      reduce using rule 28 (expression -> FALSE .)
    COMMA           reduce using rule 28 (expression -> FALSE .)
    RPAREN          reduce using rule 28 (expression -> FALSE .)


state 45

    (29) expression -> LPAREN . expression RPAREN
    (23) expression -> . INTEGER_LITERAL
    (24) expression -> . FLOAT_LITERAL
    (25) expression -> . STRING_LITERAL
    (26) expression -> . IDENTIFIER
    (27) expression -> . TRUE
    (28) expression -> . FALSE
    (29) expression -> . LPAREN expression RPAREN
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (32) expression -> . expression MULTIPLY expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression EQUAL expression
    (35) expression -> . expression NOTEQUAL expression
    (36) expression -> . expression GREATER expression
    (37) expression -> . expression LESS expression
    (38) expression -> . expression GREATER_EQUAL expression
    (39) expression -> . expression LESS_EQUAL expression

    INTEGER_LITERAL shift and go to state 40
    FLOAT_LITERAL   shift and go to state 41
    STRING_LITERAL  shift and go to state 42
    IDENTIFIER      shift and go to state 38
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44
    LPAREN          shift and go to state 45

    expression                     shift and go to state 67

state 46

    (47) function_call -> IDENTIFIER LPAREN argument_list . RPAREN SEMICOLON

    RPAREN          shift and go to state 68


state 47

    (48) argument_list -> expression .
    (49) argument_list -> expression . COMMA argument_list
    (30) expression -> expression . PLUS expression
    (31) expression -> expression . MINUS expression
    (32) expression -> expression . MULTIPLY expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . EQUAL expression
    (35) expression -> expression . NOTEQUAL expression
    (36) expression -> expression . GREATER expression
    (37) expression -> expression . LESS expression
    (38) expression -> expression . GREATER_EQUAL expression
    (39) expression -> expression . LESS_EQUAL expression

    RPAREN          reduce using rule 48 (argument_list -> expression .)
    COMMA           shift and go to state 69
    PLUS            shift and go to state 57
    MINUS           shift and go to state 58
    MULTIPLY        shift and go to state 59
    DIVIDE          shift and go to state 60
    EQUAL           shift and go to state 61
    NOTEQUAL        shift and go to state 62
    GREATER         shift and go to state 63
    LESS            shift and go to state 64
    GREATER_EQUAL   shift and go to state 65
    LESS_EQUAL      shift and go to state 66


state 48

    (50) argument_list -> empty .

    RPAREN          reduce using rule 50 (argument_list -> empty .)


state 49

    (4) declaration -> type IDENTIFIER SEMICOLON .

    CONST           reduce using rule 4 (declaration -> type IDENTIFIER SEMICOLON .)
    INT             reduce using rule 4 (declaration -> type IDENTIFIER SEMICOLON .)
    FLOAT           reduce using rule 4 (declaration -> type IDENTIFIER SEMICOLON .)
    STR             reduce using rule 4 (declaration -> type IDENTIFIER SEMICOLON .)
    BOOL            reduce using rule 4 (declaration -> type IDENTIFIER SEMICOLON .)
    IDENTIFIER      reduce using rule 4 (declaration -> type IDENTIFIER SEMICOLON .)
    IF              reduce using rule 4 (declaration -> type IDENTIFIER SEMICOLON .)
    WHILE           reduce using rule 4 (declaration -> type IDENTIFIER SEMICOLON .)
    PRINT           reduce using rule 4 (declaration -> type IDENTIFIER SEMICOLON .)
    INPUT           reduce using rule 4 (declaration -> type IDENTIFIER SEMICOLON .)
    RBRACE          reduce using rule 4 (declaration -> type IDENTIFIER SEMICOLON .)


state 50

    (5) declaration -> type IDENTIFIER COMMA . identifiers SEMICOLON
    (11) identifiers -> . IDENTIFIER
    (12) identifiers -> . IDENTIFIER COMMA identifiers

    IDENTIFIER      shift and go to state 70

    identifiers                    shift and go to state 71

state 51

    (6) declaration -> CONST IDENTIFIER ASSIGN . expression SEMICOLON
    (23) expression -> . INTEGER_LITERAL
    (24) expression -> . FLOAT_LITERAL
    (25) expression -> . STRING_LITERAL
    (26) expression -> . IDENTIFIER
    (27) expression -> . TRUE
    (28) expression -> . FALSE
    (29) expression -> . LPAREN expression RPAREN
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (32) expression -> . expression MULTIPLY expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression EQUAL expression
    (35) expression -> . expression NOTEQUAL expression
    (36) expression -> . expression GREATER expression
    (37) expression -> . expression LESS expression
    (38) expression -> . expression GREATER_EQUAL expression
    (39) expression -> . expression LESS_EQUAL expression

    INTEGER_LITERAL shift and go to state 40
    FLOAT_LITERAL   shift and go to state 41
    STRING_LITERAL  shift and go to state 42
    IDENTIFIER      shift and go to state 38
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44
    LPAREN          shift and go to state 45

    expression                     shift and go to state 72

state 52

    (40) if_statement -> IF LPAREN expression . RPAREN LBRACE statements RBRACE else_statement
    (30) expression -> expression . PLUS expression
    (31) expression -> expression . MINUS expression
    (32) expression -> expression . MULTIPLY expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . EQUAL expression
    (35) expression -> expression . NOTEQUAL expression
    (36) expression -> expression . GREATER expression
    (37) expression -> expression . LESS expression
    (38) expression -> expression . GREATER_EQUAL expression
    (39) expression -> expression . LESS_EQUAL expression

    RPAREN          shift and go to state 73
    PLUS            shift and go to state 57
    MINUS           shift and go to state 58
    MULTIPLY        shift and go to state 59
    DIVIDE          shift and go to state 60
    EQUAL           shift and go to state 61
    NOTEQUAL        shift and go to state 62
    GREATER         shift and go to state 63
    LESS            shift and go to state 64
    GREATER_EQUAL   shift and go to state 65
    LESS_EQUAL      shift and go to state 66


state 53

    (43) while_statement -> WHILE LPAREN expression . RPAREN LBRACE statements RBRACE
    (30) expression -> expression . PLUS expression
    (31) expression -> expression . MINUS expression
    (32) expression -> expression . MULTIPLY expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . EQUAL expression
    (35) expression -> expression . NOTEQUAL expression
    (36) expression -> expression . GREATER expression
    (37) expression -> expression . LESS expression
    (38) expression -> expression . GREATER_EQUAL expression
    (39) expression -> expression . LESS_EQUAL expression

    RPAREN          shift and go to state 74
    PLUS            shift and go to state 57
    MINUS           shift and go to state 58
    MULTIPLY        shift and go to state 59
    DIVIDE          shift and go to state 60
    EQUAL           shift and go to state 61
    NOTEQUAL        shift and go to state 62
    GREATER         shift and go to state 63
    LESS            shift and go to state 64
    GREATER_EQUAL   shift and go to state 65
    LESS_EQUAL      shift and go to state 66


state 54

    (44) print_statement -> PRINT LPAREN expression . RPAREN SEMICOLON
    (45) print_statement -> PRINT LPAREN expression . COMMA expression RPAREN SEMICOLON
    (30) expression -> expression . PLUS expression
    (31) expression -> expression . MINUS expression
    (32) expression -> expression . MULTIPLY expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . EQUAL expression
    (35) expression -> expression . NOTEQUAL expression
    (36) expression -> expression . GREATER expression
    (37) expression -> expression . LESS expression
    (38) expression -> expression . GREATER_EQUAL expression
    (39) expression -> expression . LESS_EQUAL expression

    RPAREN          shift and go to state 75
    COMMA           shift and go to state 76
    PLUS            shift and go to state 57
    MINUS           shift and go to state 58
    MULTIPLY        shift and go to state 59
    DIVIDE          shift and go to state 60
    EQUAL           shift and go to state 61
    NOTEQUAL        shift and go to state 62
    GREATER         shift and go to state 63
    LESS            shift and go to state 64
    GREATER_EQUAL   shift and go to state 65
    LESS_EQUAL      shift and go to state 66


state 55

    (46) input_statement -> INPUT LPAREN IDENTIFIER . RPAREN SEMICOLON

    RPAREN          shift and go to state 77


state 56

    (22) assignment -> IDENTIFIER ASSIGN expression SEMICOLON .

    RBRACE          reduce using rule 22 (assignment -> IDENTIFIER ASSIGN expression SEMICOLON .)
    CONST           reduce using rule 22 (assignment -> IDENTIFIER ASSIGN expression SEMICOLON .)
    IDENTIFIER      reduce using rule 22 (assignment -> IDENTIFIER ASSIGN expression SEMICOLON .)
    IF              reduce using rule 22 (assignment -> IDENTIFIER ASSIGN expression SEMICOLON .)
    WHILE           reduce using rule 22 (assignment -> IDENTIFIER ASSIGN expression SEMICOLON .)
    PRINT           reduce using rule 22 (assignment -> IDENTIFIER ASSIGN expression SEMICOLON .)
    INPUT           reduce using rule 22 (assignment -> IDENTIFIER ASSIGN expression SEMICOLON .)
    INT             reduce using rule 22 (assignment -> IDENTIFIER ASSIGN expression SEMICOLON .)
    FLOAT           reduce using rule 22 (assignment -> IDENTIFIER ASSIGN expression SEMICOLON .)
    STR             reduce using rule 22 (assignment -> IDENTIFIER ASSIGN expression SEMICOLON .)
    BOOL            reduce using rule 22 (assignment -> IDENTIFIER ASSIGN expression SEMICOLON .)


state 57

    (30) expression -> expression PLUS . expression
    (23) expression -> . INTEGER_LITERAL
    (24) expression -> . FLOAT_LITERAL
    (25) expression -> . STRING_LITERAL
    (26) expression -> . IDENTIFIER
    (27) expression -> . TRUE
    (28) expression -> . FALSE
    (29) expression -> . LPAREN expression RPAREN
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (32) expression -> . expression MULTIPLY expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression EQUAL expression
    (35) expression -> . expression NOTEQUAL expression
    (36) expression -> . expression GREATER expression
    (37) expression -> . expression LESS expression
    (38) expression -> . expression GREATER_EQUAL expression
    (39) expression -> . expression LESS_EQUAL expression

    INTEGER_LITERAL shift and go to state 40
    FLOAT_LITERAL   shift and go to state 41
    STRING_LITERAL  shift and go to state 42
    IDENTIFIER      shift and go to state 38
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44
    LPAREN          shift and go to state 45

    expression                     shift and go to state 78

state 58

    (31) expression -> expression MINUS . expression
    (23) expression -> . INTEGER_LITERAL
    (24) expression -> . FLOAT_LITERAL
    (25) expression -> . STRING_LITERAL
    (26) expression -> . IDENTIFIER
    (27) expression -> . TRUE
    (28) expression -> . FALSE
    (29) expression -> . LPAREN expression RPAREN
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (32) expression -> . expression MULTIPLY expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression EQUAL expression
    (35) expression -> . expression NOTEQUAL expression
    (36) expression -> . expression GREATER expression
    (37) expression -> . expression LESS expression
    (38) expression -> . expression GREATER_EQUAL expression
    (39) expression -> . expression LESS_EQUAL expression

    INTEGER_LITERAL shift and go to state 40
    FLOAT_LITERAL   shift and go to state 41
    STRING_LITERAL  shift and go to state 42
    IDENTIFIER      shift and go to state 38
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44
    LPAREN          shift and go to state 45

    expression                     shift and go to state 79

state 59

    (32) expression -> expression MULTIPLY . expression
    (23) expression -> . INTEGER_LITERAL
    (24) expression -> . FLOAT_LITERAL
    (25) expression -> . STRING_LITERAL
    (26) expression -> . IDENTIFIER
    (27) expression -> . TRUE
    (28) expression -> . FALSE
    (29) expression -> . LPAREN expression RPAREN
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (32) expression -> . expression MULTIPLY expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression EQUAL expression
    (35) expression -> . expression NOTEQUAL expression
    (36) expression -> . expression GREATER expression
    (37) expression -> . expression LESS expression
    (38) expression -> . expression GREATER_EQUAL expression
    (39) expression -> . expression LESS_EQUAL expression

    INTEGER_LITERAL shift and go to state 40
    FLOAT_LITERAL   shift and go to state 41
    STRING_LITERAL  shift and go to state 42
    IDENTIFIER      shift and go to state 38
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44
    LPAREN          shift and go to state 45

    expression                     shift and go to state 80

state 60

    (33) expression -> expression DIVIDE . expression
    (23) expression -> . INTEGER_LITERAL
    (24) expression -> . FLOAT_LITERAL
    (25) expression -> . STRING_LITERAL
    (26) expression -> . IDENTIFIER
    (27) expression -> . TRUE
    (28) expression -> . FALSE
    (29) expression -> . LPAREN expression RPAREN
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (32) expression -> . expression MULTIPLY expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression EQUAL expression
    (35) expression -> . expression NOTEQUAL expression
    (36) expression -> . expression GREATER expression
    (37) expression -> . expression LESS expression
    (38) expression -> . expression GREATER_EQUAL expression
    (39) expression -> . expression LESS_EQUAL expression

    INTEGER_LITERAL shift and go to state 40
    FLOAT_LITERAL   shift and go to state 41
    STRING_LITERAL  shift and go to state 42
    IDENTIFIER      shift and go to state 38
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44
    LPAREN          shift and go to state 45

    expression                     shift and go to state 81

state 61

    (34) expression -> expression EQUAL . expression
    (23) expression -> . INTEGER_LITERAL
    (24) expression -> . FLOAT_LITERAL
    (25) expression -> . STRING_LITERAL
    (26) expression -> . IDENTIFIER
    (27) expression -> . TRUE
    (28) expression -> . FALSE
    (29) expression -> . LPAREN expression RPAREN
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (32) expression -> . expression MULTIPLY expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression EQUAL expression
    (35) expression -> . expression NOTEQUAL expression
    (36) expression -> . expression GREATER expression
    (37) expression -> . expression LESS expression
    (38) expression -> . expression GREATER_EQUAL expression
    (39) expression -> . expression LESS_EQUAL expression

    INTEGER_LITERAL shift and go to state 40
    FLOAT_LITERAL   shift and go to state 41
    STRING_LITERAL  shift and go to state 42
    IDENTIFIER      shift and go to state 38
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44
    LPAREN          shift and go to state 45

    expression                     shift and go to state 82

state 62

    (35) expression -> expression NOTEQUAL . expression
    (23) expression -> . INTEGER_LITERAL
    (24) expression -> . FLOAT_LITERAL
    (25) expression -> . STRING_LITERAL
    (26) expression -> . IDENTIFIER
    (27) expression -> . TRUE
    (28) expression -> . FALSE
    (29) expression -> . LPAREN expression RPAREN
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (32) expression -> . expression MULTIPLY expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression EQUAL expression
    (35) expression -> . expression NOTEQUAL expression
    (36) expression -> . expression GREATER expression
    (37) expression -> . expression LESS expression
    (38) expression -> . expression GREATER_EQUAL expression
    (39) expression -> . expression LESS_EQUAL expression

    INTEGER_LITERAL shift and go to state 40
    FLOAT_LITERAL   shift and go to state 41
    STRING_LITERAL  shift and go to state 42
    IDENTIFIER      shift and go to state 38
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44
    LPAREN          shift and go to state 45

    expression                     shift and go to state 83

state 63

    (36) expression -> expression GREATER . expression
    (23) expression -> . INTEGER_LITERAL
    (24) expression -> . FLOAT_LITERAL
    (25) expression -> . STRING_LITERAL
    (26) expression -> . IDENTIFIER
    (27) expression -> . TRUE
    (28) expression -> . FALSE
    (29) expression -> . LPAREN expression RPAREN
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (32) expression -> . expression MULTIPLY expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression EQUAL expression
    (35) expression -> . expression NOTEQUAL expression
    (36) expression -> . expression GREATER expression
    (37) expression -> . expression LESS expression
    (38) expression -> . expression GREATER_EQUAL expression
    (39) expression -> . expression LESS_EQUAL expression

    INTEGER_LITERAL shift and go to state 40
    FLOAT_LITERAL   shift and go to state 41
    STRING_LITERAL  shift and go to state 42
    IDENTIFIER      shift and go to state 38
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44
    LPAREN          shift and go to state 45

    expression                     shift and go to state 84

state 64

    (37) expression -> expression LESS . expression
    (23) expression -> . INTEGER_LITERAL
    (24) expression -> . FLOAT_LITERAL
    (25) expression -> . STRING_LITERAL
    (26) expression -> . IDENTIFIER
    (27) expression -> . TRUE
    (28) expression -> . FALSE
    (29) expression -> . LPAREN expression RPAREN
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (32) expression -> . expression MULTIPLY expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression EQUAL expression
    (35) expression -> . expression NOTEQUAL expression
    (36) expression -> . expression GREATER expression
    (37) expression -> . expression LESS expression
    (38) expression -> . expression GREATER_EQUAL expression
    (39) expression -> . expression LESS_EQUAL expression

    INTEGER_LITERAL shift and go to state 40
    FLOAT_LITERAL   shift and go to state 41
    STRING_LITERAL  shift and go to state 42
    IDENTIFIER      shift and go to state 38
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44
    LPAREN          shift and go to state 45

    expression                     shift and go to state 85

state 65

    (38) expression -> expression GREATER_EQUAL . expression
    (23) expression -> . INTEGER_LITERAL
    (24) expression -> . FLOAT_LITERAL
    (25) expression -> . STRING_LITERAL
    (26) expression -> . IDENTIFIER
    (27) expression -> . TRUE
    (28) expression -> . FALSE
    (29) expression -> . LPAREN expression RPAREN
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (32) expression -> . expression MULTIPLY expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression EQUAL expression
    (35) expression -> . expression NOTEQUAL expression
    (36) expression -> . expression GREATER expression
    (37) expression -> . expression LESS expression
    (38) expression -> . expression GREATER_EQUAL expression
    (39) expression -> . expression LESS_EQUAL expression

    INTEGER_LITERAL shift and go to state 40
    FLOAT_LITERAL   shift and go to state 41
    STRING_LITERAL  shift and go to state 42
    IDENTIFIER      shift and go to state 38
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44
    LPAREN          shift and go to state 45

    expression                     shift and go to state 86

state 66

    (39) expression -> expression LESS_EQUAL . expression
    (23) expression -> . INTEGER_LITERAL
    (24) expression -> . FLOAT_LITERAL
    (25) expression -> . STRING_LITERAL
    (26) expression -> . IDENTIFIER
    (27) expression -> . TRUE
    (28) expression -> . FALSE
    (29) expression -> . LPAREN expression RPAREN
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (32) expression -> . expression MULTIPLY expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression EQUAL expression
    (35) expression -> . expression NOTEQUAL expression
    (36) expression -> . expression GREATER expression
    (37) expression -> . expression LESS expression
    (38) expression -> . expression GREATER_EQUAL expression
    (39) expression -> . expression LESS_EQUAL expression

    INTEGER_LITERAL shift and go to state 40
    FLOAT_LITERAL   shift and go to state 41
    STRING_LITERAL  shift and go to state 42
    IDENTIFIER      shift and go to state 38
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44
    LPAREN          shift and go to state 45

    expression                     shift and go to state 87

state 67

    (29) expression -> LPAREN expression . RPAREN
    (30) expression -> expression . PLUS expression
    (31) expression -> expression . MINUS expression
    (32) expression -> expression . MULTIPLY expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . EQUAL expression
    (35) expression -> expression . NOTEQUAL expression
    (36) expression -> expression . GREATER expression
    (37) expression -> expression . LESS expression
    (38) expression -> expression . GREATER_EQUAL expression
    (39) expression -> expression . LESS_EQUAL expression

    RPAREN          shift and go to state 88
    PLUS            shift and go to state 57
    MINUS           shift and go to state 58
    MULTIPLY        shift and go to state 59
    DIVIDE          shift and go to state 60
    EQUAL           shift and go to state 61
    NOTEQUAL        shift and go to state 62
    GREATER         shift and go to state 63
    LESS            shift and go to state 64
    GREATER_EQUAL   shift and go to state 65
    LESS_EQUAL      shift and go to state 66


state 68

    (47) function_call -> IDENTIFIER LPAREN argument_list RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 89


state 69

    (49) argument_list -> expression COMMA . argument_list
    (48) argument_list -> . expression
    (49) argument_list -> . expression COMMA argument_list
    (50) argument_list -> . empty
    (23) expression -> . INTEGER_LITERAL
    (24) expression -> . FLOAT_LITERAL
    (25) expression -> . STRING_LITERAL
    (26) expression -> . IDENTIFIER
    (27) expression -> . TRUE
    (28) expression -> . FALSE
    (29) expression -> . LPAREN expression RPAREN
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (32) expression -> . expression MULTIPLY expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression EQUAL expression
    (35) expression -> . expression NOTEQUAL expression
    (36) expression -> . expression GREATER expression
    (37) expression -> . expression LESS expression
    (38) expression -> . expression GREATER_EQUAL expression
    (39) expression -> . expression LESS_EQUAL expression
    (51) empty -> .

    INTEGER_LITERAL shift and go to state 40
    FLOAT_LITERAL   shift and go to state 41
    STRING_LITERAL  shift and go to state 42
    IDENTIFIER      shift and go to state 38
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44
    LPAREN          shift and go to state 45
    RPAREN          reduce using rule 51 (empty -> .)

    expression                     shift and go to state 47
    argument_list                  shift and go to state 90
    empty                          shift and go to state 48

state 70

    (11) identifiers -> IDENTIFIER .
    (12) identifiers -> IDENTIFIER . COMMA identifiers

    SEMICOLON       reduce using rule 11 (identifiers -> IDENTIFIER .)
    COMMA           shift and go to state 91


state 71

    (5) declaration -> type IDENTIFIER COMMA identifiers . SEMICOLON

    SEMICOLON       shift and go to state 92


state 72

    (6) declaration -> CONST IDENTIFIER ASSIGN expression . SEMICOLON
    (30) expression -> expression . PLUS expression
    (31) expression -> expression . MINUS expression
    (32) expression -> expression . MULTIPLY expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . EQUAL expression
    (35) expression -> expression . NOTEQUAL expression
    (36) expression -> expression . GREATER expression
    (37) expression -> expression . LESS expression
    (38) expression -> expression . GREATER_EQUAL expression
    (39) expression -> expression . LESS_EQUAL expression

    SEMICOLON       shift and go to state 93
    PLUS            shift and go to state 57
    MINUS           shift and go to state 58
    MULTIPLY        shift and go to state 59
    DIVIDE          shift and go to state 60
    EQUAL           shift and go to state 61
    NOTEQUAL        shift and go to state 62
    GREATER         shift and go to state 63
    LESS            shift and go to state 64
    GREATER_EQUAL   shift and go to state 65
    LESS_EQUAL      shift and go to state 66


state 73

    (40) if_statement -> IF LPAREN expression RPAREN . LBRACE statements RBRACE else_statement

    LBRACE          shift and go to state 94


state 74

    (43) while_statement -> WHILE LPAREN expression RPAREN . LBRACE statements RBRACE

    LBRACE          shift and go to state 95


state 75

    (44) print_statement -> PRINT LPAREN expression RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 96


state 76

    (45) print_statement -> PRINT LPAREN expression COMMA . expression RPAREN SEMICOLON
    (23) expression -> . INTEGER_LITERAL
    (24) expression -> . FLOAT_LITERAL
    (25) expression -> . STRING_LITERAL
    (26) expression -> . IDENTIFIER
    (27) expression -> . TRUE
    (28) expression -> . FALSE
    (29) expression -> . LPAREN expression RPAREN
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (32) expression -> . expression MULTIPLY expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression EQUAL expression
    (35) expression -> . expression NOTEQUAL expression
    (36) expression -> . expression GREATER expression
    (37) expression -> . expression LESS expression
    (38) expression -> . expression GREATER_EQUAL expression
    (39) expression -> . expression LESS_EQUAL expression

    INTEGER_LITERAL shift and go to state 40
    FLOAT_LITERAL   shift and go to state 41
    STRING_LITERAL  shift and go to state 42
    IDENTIFIER      shift and go to state 38
    TRUE            shift and go to state 43
    FALSE           shift and go to state 44
    LPAREN          shift and go to state 45

    expression                     shift and go to state 97

state 77

    (46) input_statement -> INPUT LPAREN IDENTIFIER RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 98


state 78

    (30) expression -> expression PLUS expression .
    (30) expression -> expression . PLUS expression
    (31) expression -> expression . MINUS expression
    (32) expression -> expression . MULTIPLY expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . EQUAL expression
    (35) expression -> expression . NOTEQUAL expression
    (36) expression -> expression . GREATER expression
    (37) expression -> expression . LESS expression
    (38) expression -> expression . GREATER_EQUAL expression
    (39) expression -> expression . LESS_EQUAL expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
    SEMICOLON       reduce using rule 30 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 30 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 30 (expression -> expression PLUS expression .)
    PLUS            shift and go to state 57
    MINUS           shift and go to state 58
    MULTIPLY        shift and go to state 59
    DIVIDE          shift and go to state 60
    EQUAL           shift and go to state 61
    NOTEQUAL        shift and go to state 62
    GREATER         shift and go to state 63
    LESS            shift and go to state 64
    GREATER_EQUAL   shift and go to state 65
    LESS_EQUAL      shift and go to state 66

  ! PLUS            [ reduce using rule 30 (expression -> expression PLUS expression .) ]
  ! MINUS           [ reduce using rule 30 (expression -> expression PLUS expression .) ]
  ! MULTIPLY        [ reduce using rule 30 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 30 (expression -> expression PLUS expression .) ]
  ! EQUAL           [ reduce using rule 30 (expression -> expression PLUS expression .) ]
  ! NOTEQUAL        [ reduce using rule 30 (expression -> expression PLUS expression .) ]
  ! GREATER         [ reduce using rule 30 (expression -> expression PLUS expression .) ]
  ! LESS            [ reduce using rule 30 (expression -> expression PLUS expression .) ]
  ! GREATER_EQUAL   [ reduce using rule 30 (expression -> expression PLUS expression .) ]
  ! LESS_EQUAL      [ reduce using rule 30 (expression -> expression PLUS expression .) ]


state 79

    (31) expression -> expression MINUS expression .
    (30) expression -> expression . PLUS expression
    (31) expression -> expression . MINUS expression
    (32) expression -> expression . MULTIPLY expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . EQUAL expression
    (35) expression -> expression . NOTEQUAL expression
    (36) expression -> expression . GREATER expression
    (37) expression -> expression . LESS expression
    (38) expression -> expression . GREATER_EQUAL expression
    (39) expression -> expression . LESS_EQUAL expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
    SEMICOLON       reduce using rule 31 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 31 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 31 (expression -> expression MINUS expression .)
    PLUS            shift and go to state 57
    MINUS           shift and go to state 58
    MULTIPLY        shift and go to state 59
    DIVIDE          shift and go to state 60
    EQUAL           shift and go to state 61
    NOTEQUAL        shift and go to state 62
    GREATER         shift and go to state 63
    LESS            shift and go to state 64
    GREATER_EQUAL   shift and go to state 65
    LESS_EQUAL      shift and go to state 66

  ! PLUS            [ reduce using rule 31 (expression -> expression MINUS expression .) ]
  ! MINUS           [ reduce using rule 31 (expression -> expression MINUS expression .) ]
  ! MULTIPLY        [ reduce using rule 31 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 31 (expression -> expression MINUS expression .) ]
  ! EQUAL           [ reduce using rule 31 (expression -> expression MINUS expression .) ]
  ! NOTEQUAL        [ reduce using rule 31 (expression -> expression MINUS expression .) ]
  ! GREATER         [ reduce using rule 31 (expression -> expression MINUS expression .) ]
  ! LESS            [ reduce using rule 31 (expression -> expression MINUS expression .) ]
  ! GREATER_EQUAL   [ reduce using rule 31 (expression -> expression MINUS expression .) ]
  ! LESS_EQUAL      [ reduce using rule 31 (expression -> expression MINUS expression .) ]


state 80

    (32) expression -> expression MULTIPLY expression .
    (30) expression -> expression . PLUS expression
    (31) expression -> expression . MINUS expression
    (32) expression -> expression . MULTIPLY expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . EQUAL expression
    (35) expression -> expression . NOTEQUAL expression
    (36) expression -> expression . GREATER expression
    (37) expression -> expression . LESS expression
    (38) expression -> expression . GREATER_EQUAL expression
    (39) expression -> expression . LESS_EQUAL expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
    SEMICOLON       reduce using rule 32 (expression -> expression MULTIPLY expression .)
    COMMA           reduce using rule 32 (expression -> expression MULTIPLY expression .)
    RPAREN          reduce using rule 32 (expression -> expression MULTIPLY expression .)
    PLUS            shift and go to state 57
    MINUS           shift and go to state 58
    MULTIPLY        shift and go to state 59
    DIVIDE          shift and go to state 60
    EQUAL           shift and go to state 61
    NOTEQUAL        shift and go to state 62
    GREATER         shift and go to state 63
    LESS            shift and go to state 64
    GREATER_EQUAL   shift and go to state 65
    LESS_EQUAL      shift and go to state 66

  ! PLUS            [ reduce using rule 32 (expression -> expression MULTIPLY expression .) ]
  ! MINUS           [ reduce using rule 32 (expression -> expression MULTIPLY expression .) ]
  ! MULTIPLY        [ reduce using rule 32 (expression -> expression MULTIPLY expression .) ]
  ! DIVIDE          [ reduce using rule 32 (expression -> expression MULTIPLY expression .) ]
  ! EQUAL           [ reduce using rule 32 (expression -> expression MULTIPLY expression .) ]
  ! NOTEQUAL        [ reduce using rule 32 (expression -> expression MULTIPLY expression .) ]
  ! GREATER         [ reduce using rule 32 (expression -> expression MULTIPLY expression .) ]
  ! LESS            [ reduce using rule 32 (expression -> expression MULTIPLY expression .) ]
  ! GREATER_EQUAL   [ reduce using rule 32 (expression -> expression MULTIPLY expression .) ]
  ! LESS_EQUAL      [ reduce using rule 32 (expression -> expression MULTIPLY expression .) ]


state 81

    (33) expression -> expression DIVIDE expression .
    (30) expression -> expression . PLUS expression
    (31) expression -> expression . MINUS expression
    (32) expression -> expression . MULTIPLY expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . EQUAL expression
    (35) expression -> expression . NOTEQUAL expression
    (36) expression -> expression . GREATER expression
    (37) expression -> expression . LESS expression
    (38) expression -> expression . GREATER_EQUAL expression
    (39) expression -> expression . LESS_EQUAL expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
    SEMICOLON       reduce using rule 33 (expression -> expression DIVIDE expression .)
    COMMA           reduce using rule 33 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 33 (expression -> expression DIVIDE expression .)
    PLUS            shift and go to state 57
    MINUS           shift and go to state 58
    MULTIPLY        shift and go to state 59
    DIVIDE          shift and go to state 60
    EQUAL           shift and go to state 61
    NOTEQUAL        shift and go to state 62
    GREATER         shift and go to state 63
    LESS            shift and go to state 64
    GREATER_EQUAL   shift and go to state 65
    LESS_EQUAL      shift and go to state 66

  ! PLUS            [ reduce using rule 33 (expression -> expression DIVIDE expression .) ]
  ! MINUS           [ reduce using rule 33 (expression -> expression DIVIDE expression .) ]
  ! MULTIPLY        [ reduce using rule 33 (expression -> expression DIVIDE expression .) ]
  ! DIVIDE          [ reduce using rule 33 (expression -> expression DIVIDE expression .) ]
  ! EQUAL           [ reduce using rule 33 (expression -> expression DIVIDE expression .) ]
  ! NOTEQUAL        [ reduce using rule 33 (expression -> expression DIVIDE expression .) ]
  ! GREATER         [ reduce using rule 33 (expression -> expression DIVIDE expression .) ]
  ! LESS            [ reduce using rule 33 (expression -> expression DIVIDE expression .) ]
  ! GREATER_EQUAL   [ reduce using rule 33 (expression -> expression DIVIDE expression .) ]
  ! LESS_EQUAL      [ reduce using rule 33 (expression -> expression DIVIDE expression .) ]


state 82

    (34) expression -> expression EQUAL expression .
    (30) expression -> expression . PLUS expression
    (31) expression -> expression . MINUS expression
    (32) expression -> expression . MULTIPLY expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . EQUAL expression
    (35) expression -> expression . NOTEQUAL expression
    (36) expression -> expression . GREATER expression
    (37) expression -> expression . LESS expression
    (38) expression -> expression . GREATER_EQUAL expression
    (39) expression -> expression . LESS_EQUAL expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
    SEMICOLON       reduce using rule 34 (expression -> expression EQUAL expression .)
    COMMA           reduce using rule 34 (expression -> expression EQUAL expression .)
    RPAREN          reduce using rule 34 (expression -> expression EQUAL expression .)
    PLUS            shift and go to state 57
    MINUS           shift and go to state 58
    MULTIPLY        shift and go to state 59
    DIVIDE          shift and go to state 60
    EQUAL           shift and go to state 61
    NOTEQUAL        shift and go to state 62
    GREATER         shift and go to state 63
    LESS            shift and go to state 64
    GREATER_EQUAL   shift and go to state 65
    LESS_EQUAL      shift and go to state 66

  ! PLUS            [ reduce using rule 34 (expression -> expression EQUAL expression .) ]
  ! MINUS           [ reduce using rule 34 (expression -> expression EQUAL expression .) ]
  ! MULTIPLY        [ reduce using rule 34 (expression -> expression EQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 34 (expression -> expression EQUAL expression .) ]
  ! EQUAL           [ reduce using rule 34 (expression -> expression EQUAL expression .) ]
  ! NOTEQUAL        [ reduce using rule 34 (expression -> expression EQUAL expression .) ]
  ! GREATER         [ reduce using rule 34 (expression -> expression EQUAL expression .) ]
  ! LESS            [ reduce using rule 34 (expression -> expression EQUAL expression .) ]
  ! GREATER_EQUAL   [ reduce using rule 34 (expression -> expression EQUAL expression .) ]
  ! LESS_EQUAL      [ reduce using rule 34 (expression -> expression EQUAL expression .) ]


state 83

    (35) expression -> expression NOTEQUAL expression .
    (30) expression -> expression . PLUS expression
    (31) expression -> expression . MINUS expression
    (32) expression -> expression . MULTIPLY expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . EQUAL expression
    (35) expression -> expression . NOTEQUAL expression
    (36) expression -> expression . GREATER expression
    (37) expression -> expression . LESS expression
    (38) expression -> expression . GREATER_EQUAL expression
    (39) expression -> expression . LESS_EQUAL expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
    SEMICOLON       reduce using rule 35 (expression -> expression NOTEQUAL expression .)
    COMMA           reduce using rule 35 (expression -> expression NOTEQUAL expression .)
    RPAREN          reduce using rule 35 (expression -> expression NOTEQUAL expression .)
    PLUS            shift and go to state 57
    MINUS           shift and go to state 58
    MULTIPLY        shift and go to state 59
    DIVIDE          shift and go to state 60
    EQUAL           shift and go to state 61
    NOTEQUAL        shift and go to state 62
    GREATER         shift and go to state 63
    LESS            shift and go to state 64
    GREATER_EQUAL   shift and go to state 65
    LESS_EQUAL      shift and go to state 66

  ! PLUS            [ reduce using rule 35 (expression -> expression NOTEQUAL expression .) ]
  ! MINUS           [ reduce using rule 35 (expression -> expression NOTEQUAL expression .) ]
  ! MULTIPLY        [ reduce using rule 35 (expression -> expression NOTEQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 35 (expression -> expression NOTEQUAL expression .) ]
  ! EQUAL           [ reduce using rule 35 (expression -> expression NOTEQUAL expression .) ]
  ! NOTEQUAL        [ reduce using rule 35 (expression -> expression NOTEQUAL expression .) ]
  ! GREATER         [ reduce using rule 35 (expression -> expression NOTEQUAL expression .) ]
  ! LESS            [ reduce using rule 35 (expression -> expression NOTEQUAL expression .) ]
  ! GREATER_EQUAL   [ reduce using rule 35 (expression -> expression NOTEQUAL expression .) ]
  ! LESS_EQUAL      [ reduce using rule 35 (expression -> expression NOTEQUAL expression .) ]


state 84

    (36) expression -> expression GREATER expression .
    (30) expression -> expression . PLUS expression
    (31) expression -> expression . MINUS expression
    (32) expression -> expression . MULTIPLY expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . EQUAL expression
    (35) expression -> expression . NOTEQUAL expression
    (36) expression -> expression . GREATER expression
    (37) expression -> expression . LESS expression
    (38) expression -> expression . GREATER_EQUAL expression
    (39) expression -> expression . LESS_EQUAL expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
    SEMICOLON       reduce using rule 36 (expression -> expression GREATER expression .)
    COMMA           reduce using rule 36 (expression -> expression GREATER expression .)
    RPAREN          reduce using rule 36 (expression -> expression GREATER expression .)
    PLUS            shift and go to state 57
    MINUS           shift and go to state 58
    MULTIPLY        shift and go to state 59
    DIVIDE          shift and go to state 60
    EQUAL           shift and go to state 61
    NOTEQUAL        shift and go to state 62
    GREATER         shift and go to state 63
    LESS            shift and go to state 64
    GREATER_EQUAL   shift and go to state 65
    LESS_EQUAL      shift and go to state 66

  ! PLUS            [ reduce using rule 36 (expression -> expression GREATER expression .) ]
  ! MINUS           [ reduce using rule 36 (expression -> expression GREATER expression .) ]
  ! MULTIPLY        [ reduce using rule 36 (expression -> expression GREATER expression .) ]
  ! DIVIDE          [ reduce using rule 36 (expression -> expression GREATER expression .) ]
  ! EQUAL           [ reduce using rule 36 (expression -> expression GREATER expression .) ]
  ! NOTEQUAL        [ reduce using rule 36 (expression -> expression GREATER expression .) ]
  ! GREATER         [ reduce using rule 36 (expression -> expression GREATER expression .) ]
  ! LESS            [ reduce using rule 36 (expression -> expression GREATER expression .) ]
  ! GREATER_EQUAL   [ reduce using rule 36 (expression -> expression GREATER expression .) ]
  ! LESS_EQUAL      [ reduce using rule 36 (expression -> expression GREATER expression .) ]


state 85

    (37) expression -> expression LESS expression .
    (30) expression -> expression . PLUS expression
    (31) expression -> expression . MINUS expression
    (32) expression -> expression . MULTIPLY expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . EQUAL expression
    (35) expression -> expression . NOTEQUAL expression
    (36) expression -> expression . GREATER expression
    (37) expression -> expression . LESS expression
    (38) expression -> expression . GREATER_EQUAL expression
    (39) expression -> expression . LESS_EQUAL expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
    SEMICOLON       reduce using rule 37 (expression -> expression LESS expression .)
    COMMA           reduce using rule 37 (expression -> expression LESS expression .)
    RPAREN          reduce using rule 37 (expression -> expression LESS expression .)
    PLUS            shift and go to state 57
    MINUS           shift and go to state 58
    MULTIPLY        shift and go to state 59
    DIVIDE          shift and go to state 60
    EQUAL           shift and go to state 61
    NOTEQUAL        shift and go to state 62
    GREATER         shift and go to state 63
    LESS            shift and go to state 64
    GREATER_EQUAL   shift and go to state 65
    LESS_EQUAL      shift and go to state 66

  ! PLUS            [ reduce using rule 37 (expression -> expression LESS expression .) ]
  ! MINUS           [ reduce using rule 37 (expression -> expression LESS expression .) ]
  ! MULTIPLY        [ reduce using rule 37 (expression -> expression LESS expression .) ]
  ! DIVIDE          [ reduce using rule 37 (expression -> expression LESS expression .) ]
  ! EQUAL           [ reduce using rule 37 (expression -> expression LESS expression .) ]
  ! NOTEQUAL        [ reduce using rule 37 (expression -> expression LESS expression .) ]
  ! GREATER         [ reduce using rule 37 (expression -> expression LESS expression .) ]
  ! LESS            [ reduce using rule 37 (expression -> expression LESS expression .) ]
  ! GREATER_EQUAL   [ reduce using rule 37 (expression -> expression LESS expression .) ]
  ! LESS_EQUAL      [ reduce using rule 37 (expression -> expression LESS expression .) ]


state 86

    (38) expression -> expression GREATER_EQUAL expression .
    (30) expression -> expression . PLUS expression
    (31) expression -> expression . MINUS expression
    (32) expression -> expression . MULTIPLY expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . EQUAL expression
    (35) expression -> expression . NOTEQUAL expression
    (36) expression -> expression . GREATER expression
    (37) expression -> expression . LESS expression
    (38) expression -> expression . GREATER_EQUAL expression
    (39) expression -> expression . LESS_EQUAL expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
    SEMICOLON       reduce using rule 38 (expression -> expression GREATER_EQUAL expression .)
    COMMA           reduce using rule 38 (expression -> expression GREATER_EQUAL expression .)
    RPAREN          reduce using rule 38 (expression -> expression GREATER_EQUAL expression .)
    PLUS            shift and go to state 57
    MINUS           shift and go to state 58
    MULTIPLY        shift and go to state 59
    DIVIDE          shift and go to state 60
    EQUAL           shift and go to state 61
    NOTEQUAL        shift and go to state 62
    GREATER         shift and go to state 63
    LESS            shift and go to state 64
    GREATER_EQUAL   shift and go to state 65
    LESS_EQUAL      shift and go to state 66

  ! PLUS            [ reduce using rule 38 (expression -> expression GREATER_EQUAL expression .) ]
  ! MINUS           [ reduce using rule 38 (expression -> expression GREATER_EQUAL expression .) ]
  ! MULTIPLY        [ reduce using rule 38 (expression -> expression GREATER_EQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 38 (expression -> expression GREATER_EQUAL expression .) ]
  ! EQUAL           [ reduce using rule 38 (expression -> expression GREATER_EQUAL expression .) ]
  ! NOTEQUAL        [ reduce using rule 38 (expression -> expression GREATER_EQUAL expression .) ]
  ! GREATER         [ reduce using rule 38 (expression -> expression GREATER_EQUAL expression .) ]
  ! LESS            [ reduce using rule 38 (expression -> expression GREATER_EQUAL expression .) ]
  ! GREATER_EQUAL   [ reduce using rule 38 (expression -> expression GREATER_EQUAL expression .) ]
  ! LESS_EQUAL      [ reduce using rule 38 (expression -> expression GREATER_EQUAL expression .) ]


state 87

    (39) expression -> expression LESS_EQUAL expression .
    (30) expression -> expression . PLUS expression
    (31) expression -> expression . MINUS expression
    (32) expression -> expression . MULTIPLY expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . EQUAL expression
    (35) expression -> expression . NOTEQUAL expression
    (36) expression -> expression . GREATER expression
    (37) expression -> expression . LESS expression
    (38) expression -> expression . GREATER_EQUAL expression
    (39) expression -> expression . LESS_EQUAL expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
    SEMICOLON       reduce using rule 39 (expression -> expression LESS_EQUAL expression .)
    COMMA           reduce using rule 39 (expression -> expression LESS_EQUAL expression .)
    RPAREN          reduce using rule 39 (expression -> expression LESS_EQUAL expression .)
    PLUS            shift and go to state 57
    MINUS           shift and go to state 58
    MULTIPLY        shift and go to state 59
    DIVIDE          shift and go to state 60
    EQUAL           shift and go to state 61
    NOTEQUAL        shift and go to state 62
    GREATER         shift and go to state 63
    LESS            shift and go to state 64
    GREATER_EQUAL   shift and go to state 65
    LESS_EQUAL      shift and go to state 66

  ! PLUS            [ reduce using rule 39 (expression -> expression LESS_EQUAL expression .) ]
  ! MINUS           [ reduce using rule 39 (expression -> expression LESS_EQUAL expression .) ]
  ! MULTIPLY        [ reduce using rule 39 (expression -> expression LESS_EQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 39 (expression -> expression LESS_EQUAL expression .) ]
  ! EQUAL           [ reduce using rule 39 (expression -> expression LESS_EQUAL expression .) ]
  ! NOTEQUAL        [ reduce using rule 39 (expression -> expression LESS_EQUAL expression .) ]
  ! GREATER         [ reduce using rule 39 (expression -> expression LESS_EQUAL expression .) ]
  ! LESS            [ reduce using rule 39 (expression -> expression LESS_EQUAL expression .) ]
  ! GREATER_EQUAL   [ reduce using rule 39 (expression -> expression LESS_EQUAL expression .) ]
  ! LESS_EQUAL      [ reduce using rule 39 (expression -> expression LESS_EQUAL expression .) ]


state 88

    (29) expression -> LPAREN expression RPAREN .

    SEMICOLON       reduce using rule 29 (expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 29 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 29 (expression -> LPAREN expression RPAREN .)
    MULTIPLY        reduce using rule 29 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 29 (expression -> LPAREN expression RPAREN .)
    EQUAL           reduce using rule 29 (expression -> LPAREN expression RPAREN .)
    NOTEQUAL        reduce using rule 29 (expression -> LPAREN expression RPAREN .)
    GREATER         reduce using rule 29 (expression -> LPAREN expression RPAREN .)
    LESS            reduce using rule 29 (expression -> LPAREN expression RPAREN .)
    GREATER_EQUAL   reduce using rule 29 (expression -> LPAREN expression RPAREN .)
    LESS_EQUAL      reduce using rule 29 (expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 29 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 29 (expression -> LPAREN expression RPAREN .)


state 89

    (47) function_call -> IDENTIFIER LPAREN argument_list RPAREN SEMICOLON .

    RBRACE          reduce using rule 47 (function_call -> IDENTIFIER LPAREN argument_list RPAREN SEMICOLON .)
    CONST           reduce using rule 47 (function_call -> IDENTIFIER LPAREN argument_list RPAREN SEMICOLON .)
    IDENTIFIER      reduce using rule 47 (function_call -> IDENTIFIER LPAREN argument_list RPAREN SEMICOLON .)
    IF              reduce using rule 47 (function_call -> IDENTIFIER LPAREN argument_list RPAREN SEMICOLON .)
    WHILE           reduce using rule 47 (function_call -> IDENTIFIER LPAREN argument_list RPAREN SEMICOLON .)
    PRINT           reduce using rule 47 (function_call -> IDENTIFIER LPAREN argument_list RPAREN SEMICOLON .)
    INPUT           reduce using rule 47 (function_call -> IDENTIFIER LPAREN argument_list RPAREN SEMICOLON .)
    INT             reduce using rule 47 (function_call -> IDENTIFIER LPAREN argument_list RPAREN SEMICOLON .)
    FLOAT           reduce using rule 47 (function_call -> IDENTIFIER LPAREN argument_list RPAREN SEMICOLON .)
    STR             reduce using rule 47 (function_call -> IDENTIFIER LPAREN argument_list RPAREN SEMICOLON .)
    BOOL            reduce using rule 47 (function_call -> IDENTIFIER LPAREN argument_list RPAREN SEMICOLON .)


state 90

    (49) argument_list -> expression COMMA argument_list .

    RPAREN          reduce using rule 49 (argument_list -> expression COMMA argument_list .)


state 91

    (12) identifiers -> IDENTIFIER COMMA . identifiers
    (11) identifiers -> . IDENTIFIER
    (12) identifiers -> . IDENTIFIER COMMA identifiers

    IDENTIFIER      shift and go to state 70

    identifiers                    shift and go to state 99

state 92

    (5) declaration -> type IDENTIFIER COMMA identifiers SEMICOLON .

    CONST           reduce using rule 5 (declaration -> type IDENTIFIER COMMA identifiers SEMICOLON .)
    INT             reduce using rule 5 (declaration -> type IDENTIFIER COMMA identifiers SEMICOLON .)
    FLOAT           reduce using rule 5 (declaration -> type IDENTIFIER COMMA identifiers SEMICOLON .)
    STR             reduce using rule 5 (declaration -> type IDENTIFIER COMMA identifiers SEMICOLON .)
    BOOL            reduce using rule 5 (declaration -> type IDENTIFIER COMMA identifiers SEMICOLON .)
    IDENTIFIER      reduce using rule 5 (declaration -> type IDENTIFIER COMMA identifiers SEMICOLON .)
    IF              reduce using rule 5 (declaration -> type IDENTIFIER COMMA identifiers SEMICOLON .)
    WHILE           reduce using rule 5 (declaration -> type IDENTIFIER COMMA identifiers SEMICOLON .)
    PRINT           reduce using rule 5 (declaration -> type IDENTIFIER COMMA identifiers SEMICOLON .)
    INPUT           reduce using rule 5 (declaration -> type IDENTIFIER COMMA identifiers SEMICOLON .)
    RBRACE          reduce using rule 5 (declaration -> type IDENTIFIER COMMA identifiers SEMICOLON .)


state 93

    (6) declaration -> CONST IDENTIFIER ASSIGN expression SEMICOLON .

    CONST           reduce using rule 6 (declaration -> CONST IDENTIFIER ASSIGN expression SEMICOLON .)
    INT             reduce using rule 6 (declaration -> CONST IDENTIFIER ASSIGN expression SEMICOLON .)
    FLOAT           reduce using rule 6 (declaration -> CONST IDENTIFIER ASSIGN expression SEMICOLON .)
    STR             reduce using rule 6 (declaration -> CONST IDENTIFIER ASSIGN expression SEMICOLON .)
    BOOL            reduce using rule 6 (declaration -> CONST IDENTIFIER ASSIGN expression SEMICOLON .)
    IDENTIFIER      reduce using rule 6 (declaration -> CONST IDENTIFIER ASSIGN expression SEMICOLON .)
    IF              reduce using rule 6 (declaration -> CONST IDENTIFIER ASSIGN expression SEMICOLON .)
    WHILE           reduce using rule 6 (declaration -> CONST IDENTIFIER ASSIGN expression SEMICOLON .)
    PRINT           reduce using rule 6 (declaration -> CONST IDENTIFIER ASSIGN expression SEMICOLON .)
    INPUT           reduce using rule 6 (declaration -> CONST IDENTIFIER ASSIGN expression SEMICOLON .)
    RBRACE          reduce using rule 6 (declaration -> CONST IDENTIFIER ASSIGN expression SEMICOLON .)


state 94

    (40) if_statement -> IF LPAREN expression RPAREN LBRACE . statements RBRACE else_statement
    (13) statements -> . statements statement
    (14) statements -> . statement
    (15) statement -> . declaration
    (16) statement -> . assignment
    (17) statement -> . if_statement
    (18) statement -> . while_statement
    (19) statement -> . print_statement
    (20) statement -> . input_statement
    (21) statement -> . function_call
    (4) declaration -> . type IDENTIFIER SEMICOLON
    (5) declaration -> . type IDENTIFIER COMMA identifiers SEMICOLON
    (6) declaration -> . CONST IDENTIFIER ASSIGN expression SEMICOLON
    (22) assignment -> . IDENTIFIER ASSIGN expression SEMICOLON
    (40) if_statement -> . IF LPAREN expression RPAREN LBRACE statements RBRACE else_statement
    (43) while_statement -> . WHILE LPAREN expression RPAREN LBRACE statements RBRACE
    (44) print_statement -> . PRINT LPAREN expression RPAREN SEMICOLON
    (45) print_statement -> . PRINT LPAREN expression COMMA expression RPAREN SEMICOLON
    (46) input_statement -> . INPUT LPAREN IDENTIFIER RPAREN SEMICOLON
    (47) function_call -> . IDENTIFIER LPAREN argument_list RPAREN SEMICOLON
    (7) type -> . INT
    (8) type -> . FLOAT
    (9) type -> . STR
    (10) type -> . BOOL

    CONST           shift and go to state 12
    IDENTIFIER      shift and go to state 7
    IF              shift and go to state 23
    WHILE           shift and go to state 24
    PRINT           shift and go to state 25
    INPUT           shift and go to state 26
    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    STR             shift and go to state 21
    BOOL            shift and go to state 22

    statements                     shift and go to state 100
    statement                      shift and go to state 10
    declaration                    shift and go to state 31
    assignment                     shift and go to state 13
    if_statement                   shift and go to state 14
    while_statement                shift and go to state 15
    print_statement                shift and go to state 16
    input_statement                shift and go to state 17
    function_call                  shift and go to state 18
    type                           shift and go to state 11

state 95

    (43) while_statement -> WHILE LPAREN expression RPAREN LBRACE . statements RBRACE
    (13) statements -> . statements statement
    (14) statements -> . statement
    (15) statement -> . declaration
    (16) statement -> . assignment
    (17) statement -> . if_statement
    (18) statement -> . while_statement
    (19) statement -> . print_statement
    (20) statement -> . input_statement
    (21) statement -> . function_call
    (4) declaration -> . type IDENTIFIER SEMICOLON
    (5) declaration -> . type IDENTIFIER COMMA identifiers SEMICOLON
    (6) declaration -> . CONST IDENTIFIER ASSIGN expression SEMICOLON
    (22) assignment -> . IDENTIFIER ASSIGN expression SEMICOLON
    (40) if_statement -> . IF LPAREN expression RPAREN LBRACE statements RBRACE else_statement
    (43) while_statement -> . WHILE LPAREN expression RPAREN LBRACE statements RBRACE
    (44) print_statement -> . PRINT LPAREN expression RPAREN SEMICOLON
    (45) print_statement -> . PRINT LPAREN expression COMMA expression RPAREN SEMICOLON
    (46) input_statement -> . INPUT LPAREN IDENTIFIER RPAREN SEMICOLON
    (47) function_call -> . IDENTIFIER LPAREN argument_list RPAREN SEMICOLON
    (7) type -> . INT
    (8) type -> . FLOAT
    (9) type -> . STR
    (10) type -> . BOOL

    CONST           shift and go to state 12
    IDENTIFIER      shift and go to state 7
    IF              shift and go to state 23
    WHILE           shift and go to state 24
    PRINT           shift and go to state 25
    INPUT           shift and go to state 26
    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    STR             shift and go to state 21
    BOOL            shift and go to state 22

    statements                     shift and go to state 101
    statement                      shift and go to state 10
    declaration                    shift and go to state 31
    assignment                     shift and go to state 13
    if_statement                   shift and go to state 14
    while_statement                shift and go to state 15
    print_statement                shift and go to state 16
    input_statement                shift and go to state 17
    function_call                  shift and go to state 18
    type                           shift and go to state 11

state 96

    (44) print_statement -> PRINT LPAREN expression RPAREN SEMICOLON .

    RBRACE          reduce using rule 44 (print_statement -> PRINT LPAREN expression RPAREN SEMICOLON .)
    CONST           reduce using rule 44 (print_statement -> PRINT LPAREN expression RPAREN SEMICOLON .)
    IDENTIFIER      reduce using rule 44 (print_statement -> PRINT LPAREN expression RPAREN SEMICOLON .)
    IF              reduce using rule 44 (print_statement -> PRINT LPAREN expression RPAREN SEMICOLON .)
    WHILE           reduce using rule 44 (print_statement -> PRINT LPAREN expression RPAREN SEMICOLON .)
    PRINT           reduce using rule 44 (print_statement -> PRINT LPAREN expression RPAREN SEMICOLON .)
    INPUT           reduce using rule 44 (print_statement -> PRINT LPAREN expression RPAREN SEMICOLON .)
    INT             reduce using rule 44 (print_statement -> PRINT LPAREN expression RPAREN SEMICOLON .)
    FLOAT           reduce using rule 44 (print_statement -> PRINT LPAREN expression RPAREN SEMICOLON .)
    STR             reduce using rule 44 (print_statement -> PRINT LPAREN expression RPAREN SEMICOLON .)
    BOOL            reduce using rule 44 (print_statement -> PRINT LPAREN expression RPAREN SEMICOLON .)


state 97

    (45) print_statement -> PRINT LPAREN expression COMMA expression . RPAREN SEMICOLON
    (30) expression -> expression . PLUS expression
    (31) expression -> expression . MINUS expression
    (32) expression -> expression . MULTIPLY expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . EQUAL expression
    (35) expression -> expression . NOTEQUAL expression
    (36) expression -> expression . GREATER expression
    (37) expression -> expression . LESS expression
    (38) expression -> expression . GREATER_EQUAL expression
    (39) expression -> expression . LESS_EQUAL expression

    RPAREN          shift and go to state 102
    PLUS            shift and go to state 57
    MINUS           shift and go to state 58
    MULTIPLY        shift and go to state 59
    DIVIDE          shift and go to state 60
    EQUAL           shift and go to state 61
    NOTEQUAL        shift and go to state 62
    GREATER         shift and go to state 63
    LESS            shift and go to state 64
    GREATER_EQUAL   shift and go to state 65
    LESS_EQUAL      shift and go to state 66


state 98

    (46) input_statement -> INPUT LPAREN IDENTIFIER RPAREN SEMICOLON .

    RBRACE          reduce using rule 46 (input_statement -> INPUT LPAREN IDENTIFIER RPAREN SEMICOLON .)
    CONST           reduce using rule 46 (input_statement -> INPUT LPAREN IDENTIFIER RPAREN SEMICOLON .)
    IDENTIFIER      reduce using rule 46 (input_statement -> INPUT LPAREN IDENTIFIER RPAREN SEMICOLON .)
    IF              reduce using rule 46 (input_statement -> INPUT LPAREN IDENTIFIER RPAREN SEMICOLON .)
    WHILE           reduce using rule 46 (input_statement -> INPUT LPAREN IDENTIFIER RPAREN SEMICOLON .)
    PRINT           reduce using rule 46 (input_statement -> INPUT LPAREN IDENTIFIER RPAREN SEMICOLON .)
    INPUT           reduce using rule 46 (input_statement -> INPUT LPAREN IDENTIFIER RPAREN SEMICOLON .)
    INT             reduce using rule 46 (input_statement -> INPUT LPAREN IDENTIFIER RPAREN SEMICOLON .)
    FLOAT           reduce using rule 46 (input_statement -> INPUT LPAREN IDENTIFIER RPAREN SEMICOLON .)
    STR             reduce using rule 46 (input_statement -> INPUT LPAREN IDENTIFIER RPAREN SEMICOLON .)
    BOOL            reduce using rule 46 (input_statement -> INPUT LPAREN IDENTIFIER RPAREN SEMICOLON .)


state 99

    (12) identifiers -> IDENTIFIER COMMA identifiers .

    SEMICOLON       reduce using rule 12 (identifiers -> IDENTIFIER COMMA identifiers .)


state 100

    (40) if_statement -> IF LPAREN expression RPAREN LBRACE statements . RBRACE else_statement
    (13) statements -> statements . statement
    (15) statement -> . declaration
    (16) statement -> . assignment
    (17) statement -> . if_statement
    (18) statement -> . while_statement
    (19) statement -> . print_statement
    (20) statement -> . input_statement
    (21) statement -> . function_call
    (4) declaration -> . type IDENTIFIER SEMICOLON
    (5) declaration -> . type IDENTIFIER COMMA identifiers SEMICOLON
    (6) declaration -> . CONST IDENTIFIER ASSIGN expression SEMICOLON
    (22) assignment -> . IDENTIFIER ASSIGN expression SEMICOLON
    (40) if_statement -> . IF LPAREN expression RPAREN LBRACE statements RBRACE else_statement
    (43) while_statement -> . WHILE LPAREN expression RPAREN LBRACE statements RBRACE
    (44) print_statement -> . PRINT LPAREN expression RPAREN SEMICOLON
    (45) print_statement -> . PRINT LPAREN expression COMMA expression RPAREN SEMICOLON
    (46) input_statement -> . INPUT LPAREN IDENTIFIER RPAREN SEMICOLON
    (47) function_call -> . IDENTIFIER LPAREN argument_list RPAREN SEMICOLON
    (7) type -> . INT
    (8) type -> . FLOAT
    (9) type -> . STR
    (10) type -> . BOOL

    RBRACE          shift and go to state 103
    CONST           shift and go to state 12
    IDENTIFIER      shift and go to state 7
    IF              shift and go to state 23
    WHILE           shift and go to state 24
    PRINT           shift and go to state 25
    INPUT           shift and go to state 26
    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    STR             shift and go to state 21
    BOOL            shift and go to state 22

    statement                      shift and go to state 30
    declaration                    shift and go to state 31
    assignment                     shift and go to state 13
    if_statement                   shift and go to state 14
    while_statement                shift and go to state 15
    print_statement                shift and go to state 16
    input_statement                shift and go to state 17
    function_call                  shift and go to state 18
    type                           shift and go to state 11

state 101

    (43) while_statement -> WHILE LPAREN expression RPAREN LBRACE statements . RBRACE
    (13) statements -> statements . statement
    (15) statement -> . declaration
    (16) statement -> . assignment
    (17) statement -> . if_statement
    (18) statement -> . while_statement
    (19) statement -> . print_statement
    (20) statement -> . input_statement
    (21) statement -> . function_call
    (4) declaration -> . type IDENTIFIER SEMICOLON
    (5) declaration -> . type IDENTIFIER COMMA identifiers SEMICOLON
    (6) declaration -> . CONST IDENTIFIER ASSIGN expression SEMICOLON
    (22) assignment -> . IDENTIFIER ASSIGN expression SEMICOLON
    (40) if_statement -> . IF LPAREN expression RPAREN LBRACE statements RBRACE else_statement
    (43) while_statement -> . WHILE LPAREN expression RPAREN LBRACE statements RBRACE
    (44) print_statement -> . PRINT LPAREN expression RPAREN SEMICOLON
    (45) print_statement -> . PRINT LPAREN expression COMMA expression RPAREN SEMICOLON
    (46) input_statement -> . INPUT LPAREN IDENTIFIER RPAREN SEMICOLON
    (47) function_call -> . IDENTIFIER LPAREN argument_list RPAREN SEMICOLON
    (7) type -> . INT
    (8) type -> . FLOAT
    (9) type -> . STR
    (10) type -> . BOOL

    RBRACE          shift and go to state 104
    CONST           shift and go to state 12
    IDENTIFIER      shift and go to state 7
    IF              shift and go to state 23
    WHILE           shift and go to state 24
    PRINT           shift and go to state 25
    INPUT           shift and go to state 26
    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    STR             shift and go to state 21
    BOOL            shift and go to state 22

    statement                      shift and go to state 30
    declaration                    shift and go to state 31
    assignment                     shift and go to state 13
    if_statement                   shift and go to state 14
    while_statement                shift and go to state 15
    print_statement                shift and go to state 16
    input_statement                shift and go to state 17
    function_call                  shift and go to state 18
    type                           shift and go to state 11

state 102

    (45) print_statement -> PRINT LPAREN expression COMMA expression RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 105


state 103

    (40) if_statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE . else_statement
    (41) else_statement -> . ELSE LBRACE statements RBRACE
    (42) else_statement -> . empty
    (51) empty -> .

    ELSE            shift and go to state 107
    RBRACE          reduce using rule 51 (empty -> .)
    CONST           reduce using rule 51 (empty -> .)
    IDENTIFIER      reduce using rule 51 (empty -> .)
    IF              reduce using rule 51 (empty -> .)
    WHILE           reduce using rule 51 (empty -> .)
    PRINT           reduce using rule 51 (empty -> .)
    INPUT           reduce using rule 51 (empty -> .)
    INT             reduce using rule 51 (empty -> .)
    FLOAT           reduce using rule 51 (empty -> .)
    STR             reduce using rule 51 (empty -> .)
    BOOL            reduce using rule 51 (empty -> .)

    else_statement                 shift and go to state 106
    empty                          shift and go to state 108

state 104

    (43) while_statement -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .

    RBRACE          reduce using rule 43 (while_statement -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    CONST           reduce using rule 43 (while_statement -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    IDENTIFIER      reduce using rule 43 (while_statement -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    IF              reduce using rule 43 (while_statement -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    WHILE           reduce using rule 43 (while_statement -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    PRINT           reduce using rule 43 (while_statement -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    INPUT           reduce using rule 43 (while_statement -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    INT             reduce using rule 43 (while_statement -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    FLOAT           reduce using rule 43 (while_statement -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    STR             reduce using rule 43 (while_statement -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    BOOL            reduce using rule 43 (while_statement -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)


state 105

    (45) print_statement -> PRINT LPAREN expression COMMA expression RPAREN SEMICOLON .

    RBRACE          reduce using rule 45 (print_statement -> PRINT LPAREN expression COMMA expression RPAREN SEMICOLON .)
    CONST           reduce using rule 45 (print_statement -> PRINT LPAREN expression COMMA expression RPAREN SEMICOLON .)
    IDENTIFIER      reduce using rule 45 (print_statement -> PRINT LPAREN expression COMMA expression RPAREN SEMICOLON .)
    IF              reduce using rule 45 (print_statement -> PRINT LPAREN expression COMMA expression RPAREN SEMICOLON .)
    WHILE           reduce using rule 45 (print_statement -> PRINT LPAREN expression COMMA expression RPAREN SEMICOLON .)
    PRINT           reduce using rule 45 (print_statement -> PRINT LPAREN expression COMMA expression RPAREN SEMICOLON .)
    INPUT           reduce using rule 45 (print_statement -> PRINT LPAREN expression COMMA expression RPAREN SEMICOLON .)
    INT             reduce using rule 45 (print_statement -> PRINT LPAREN expression COMMA expression RPAREN SEMICOLON .)
    FLOAT           reduce using rule 45 (print_statement -> PRINT LPAREN expression COMMA expression RPAREN SEMICOLON .)
    STR             reduce using rule 45 (print_statement -> PRINT LPAREN expression COMMA expression RPAREN SEMICOLON .)
    BOOL            reduce using rule 45 (print_statement -> PRINT LPAREN expression COMMA expression RPAREN SEMICOLON .)


state 106

    (40) if_statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE else_statement .

    RBRACE          reduce using rule 40 (if_statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE else_statement .)
    CONST           reduce using rule 40 (if_statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE else_statement .)
    IDENTIFIER      reduce using rule 40 (if_statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE else_statement .)
    IF              reduce using rule 40 (if_statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE else_statement .)
    WHILE           reduce using rule 40 (if_statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE else_statement .)
    PRINT           reduce using rule 40 (if_statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE else_statement .)
    INPUT           reduce using rule 40 (if_statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE else_statement .)
    INT             reduce using rule 40 (if_statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE else_statement .)
    FLOAT           reduce using rule 40 (if_statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE else_statement .)
    STR             reduce using rule 40 (if_statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE else_statement .)
    BOOL            reduce using rule 40 (if_statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE else_statement .)


state 107

    (41) else_statement -> ELSE . LBRACE statements RBRACE

    LBRACE          shift and go to state 109


state 108

    (42) else_statement -> empty .

    RBRACE          reduce using rule 42 (else_statement -> empty .)
    CONST           reduce using rule 42 (else_statement -> empty .)
    IDENTIFIER      reduce using rule 42 (else_statement -> empty .)
    IF              reduce using rule 42 (else_statement -> empty .)
    WHILE           reduce using rule 42 (else_statement -> empty .)
    PRINT           reduce using rule 42 (else_statement -> empty .)
    INPUT           reduce using rule 42 (else_statement -> empty .)
    INT             reduce using rule 42 (else_statement -> empty .)
    FLOAT           reduce using rule 42 (else_statement -> empty .)
    STR             reduce using rule 42 (else_statement -> empty .)
    BOOL            reduce using rule 42 (else_statement -> empty .)


state 109

    (41) else_statement -> ELSE LBRACE . statements RBRACE
    (13) statements -> . statements statement
    (14) statements -> . statement
    (15) statement -> . declaration
    (16) statement -> . assignment
    (17) statement -> . if_statement
    (18) statement -> . while_statement
    (19) statement -> . print_statement
    (20) statement -> . input_statement
    (21) statement -> . function_call
    (4) declaration -> . type IDENTIFIER SEMICOLON
    (5) declaration -> . type IDENTIFIER COMMA identifiers SEMICOLON
    (6) declaration -> . CONST IDENTIFIER ASSIGN expression SEMICOLON
    (22) assignment -> . IDENTIFIER ASSIGN expression SEMICOLON
    (40) if_statement -> . IF LPAREN expression RPAREN LBRACE statements RBRACE else_statement
    (43) while_statement -> . WHILE LPAREN expression RPAREN LBRACE statements RBRACE
    (44) print_statement -> . PRINT LPAREN expression RPAREN SEMICOLON
    (45) print_statement -> . PRINT LPAREN expression COMMA expression RPAREN SEMICOLON
    (46) input_statement -> . INPUT LPAREN IDENTIFIER RPAREN SEMICOLON
    (47) function_call -> . IDENTIFIER LPAREN argument_list RPAREN SEMICOLON
    (7) type -> . INT
    (8) type -> . FLOAT
    (9) type -> . STR
    (10) type -> . BOOL

    CONST           shift and go to state 12
    IDENTIFIER      shift and go to state 7
    IF              shift and go to state 23
    WHILE           shift and go to state 24
    PRINT           shift and go to state 25
    INPUT           shift and go to state 26
    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    STR             shift and go to state 21
    BOOL            shift and go to state 22

    statements                     shift and go to state 110
    statement                      shift and go to state 10
    declaration                    shift and go to state 31
    assignment                     shift and go to state 13
    if_statement                   shift and go to state 14
    while_statement                shift and go to state 15
    print_statement                shift and go to state 16
    input_statement                shift and go to state 17
    function_call                  shift and go to state 18
    type                           shift and go to state 11

state 110

    (41) else_statement -> ELSE LBRACE statements . RBRACE
    (13) statements -> statements . statement
    (15) statement -> . declaration
    (16) statement -> . assignment
    (17) statement -> . if_statement
    (18) statement -> . while_statement
    (19) statement -> . print_statement
    (20) statement -> . input_statement
    (21) statement -> . function_call
    (4) declaration -> . type IDENTIFIER SEMICOLON
    (5) declaration -> . type IDENTIFIER COMMA identifiers SEMICOLON
    (6) declaration -> . CONST IDENTIFIER ASSIGN expression SEMICOLON
    (22) assignment -> . IDENTIFIER ASSIGN expression SEMICOLON
    (40) if_statement -> . IF LPAREN expression RPAREN LBRACE statements RBRACE else_statement
    (43) while_statement -> . WHILE LPAREN expression RPAREN LBRACE statements RBRACE
    (44) print_statement -> . PRINT LPAREN expression RPAREN SEMICOLON
    (45) print_statement -> . PRINT LPAREN expression COMMA expression RPAREN SEMICOLON
    (46) input_statement -> . INPUT LPAREN IDENTIFIER RPAREN SEMICOLON
    (47) function_call -> . IDENTIFIER LPAREN argument_list RPAREN SEMICOLON
    (7) type -> . INT
    (8) type -> . FLOAT
    (9) type -> . STR
    (10) type -> . BOOL

    RBRACE          shift and go to state 111
    CONST           shift and go to state 12
    IDENTIFIER      shift and go to state 7
    IF              shift and go to state 23
    WHILE           shift and go to state 24
    PRINT           shift and go to state 25
    INPUT           shift and go to state 26
    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    STR             shift and go to state 21
    BOOL            shift and go to state 22

    statement                      shift and go to state 30
    declaration                    shift and go to state 31
    assignment                     shift and go to state 13
    if_statement                   shift and go to state 14
    while_statement                shift and go to state 15
    print_statement                shift and go to state 16
    input_statement                shift and go to state 17
    function_call                  shift and go to state 18
    type                           shift and go to state 11

state 111

    (41) else_statement -> ELSE LBRACE statements RBRACE .

    RBRACE          reduce using rule 41 (else_statement -> ELSE LBRACE statements RBRACE .)
    CONST           reduce using rule 41 (else_statement -> ELSE LBRACE statements RBRACE .)
    IDENTIFIER      reduce using rule 41 (else_statement -> ELSE LBRACE statements RBRACE .)
    IF              reduce using rule 41 (else_statement -> ELSE LBRACE statements RBRACE .)
    WHILE           reduce using rule 41 (else_statement -> ELSE LBRACE statements RBRACE .)
    PRINT           reduce using rule 41 (else_statement -> ELSE LBRACE statements RBRACE .)
    INPUT           reduce using rule 41 (else_statement -> ELSE LBRACE statements RBRACE .)
    INT             reduce using rule 41 (else_statement -> ELSE LBRACE statements RBRACE .)
    FLOAT           reduce using rule 41 (else_statement -> ELSE LBRACE statements RBRACE .)
    STR             reduce using rule 41 (else_statement -> ELSE LBRACE statements RBRACE .)
    BOOL            reduce using rule 41 (else_statement -> ELSE LBRACE statements RBRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PLUS in state 78 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 78 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 78 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 78 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 78 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 78 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 78 resolved as shift
WARNING: shift/reduce conflict for LESS in state 78 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 78 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 78 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 79 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 79 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 79 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 79 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 79 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 79 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 79 resolved as shift
WARNING: shift/reduce conflict for LESS in state 79 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 79 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 79 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 80 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 80 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 80 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 80 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 80 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 80 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 80 resolved as shift
WARNING: shift/reduce conflict for LESS in state 80 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 80 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 80 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 81 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 81 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 81 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 81 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 81 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 81 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 81 resolved as shift
WARNING: shift/reduce conflict for LESS in state 81 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 81 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 81 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 82 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 82 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 82 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 82 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 82 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 82 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 82 resolved as shift
WARNING: shift/reduce conflict for LESS in state 82 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 82 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 82 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 83 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 83 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 83 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 83 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 83 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 83 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 83 resolved as shift
WARNING: shift/reduce conflict for LESS in state 83 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 83 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 83 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 84 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 84 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 84 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 84 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 84 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 84 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 84 resolved as shift
WARNING: shift/reduce conflict for LESS in state 84 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 84 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 84 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 85 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 85 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 85 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 85 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 85 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 85 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 85 resolved as shift
WARNING: shift/reduce conflict for LESS in state 85 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 85 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 85 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 86 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 86 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 86 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 86 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 86 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 86 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 86 resolved as shift
WARNING: shift/reduce conflict for LESS in state 86 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 86 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 86 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 87 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 87 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 87 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 87 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 87 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 87 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 87 resolved as shift
WARNING: shift/reduce conflict for LESS in state 87 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 87 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 87 resolved as shift
WARNING: reduce/reduce conflict in state 9 resolved using rule (declarations -> declarations declaration)
WARNING: rejected rule (statement -> declaration) in state 9
