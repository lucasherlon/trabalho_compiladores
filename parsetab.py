
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ASSIGN BOOL COMMA CONST DIVIDE ELSE EQUAL FALSE FLOAT FLOAT_LITERAL GREATER GREATER_EQUAL IDENTIFIER IF INPUT INT INTEGER_LITERAL LBRACE LESS LESS_EQUAL LPAREN MINUS MULTIPLY NOT NOTEQUAL PLUS PRINT PROGRAM RBRACE RPAREN SEMICOLON STR STRING_LITERAL TRUE WHILEprogram : PROGRAM IDENTIFIER LBRACE declarations statements RBRACEdeclarations : declarations declaration\n| emptydeclaration : type IDENTIFIER SEMICOLON\n| type IDENTIFIER COMMA identifiers SEMICOLON\n| CONST IDENTIFIER ASSIGN expression SEMICOLONtype : INT\n| FLOAT\n| STR\n| BOOLidentifiers : IDENTIFIER\n| IDENTIFIER COMMA identifiersstatements : statements statement\n| statementstatement : declaration\n| assignment\n| if_statement\n| while_statement\n| print_statement\n| input_statement\n| function_callassignment : IDENTIFIER ASSIGN expression SEMICOLONexpression : INTEGER_LITERAL\n| FLOAT_LITERAL\n| STRING_LITERAL\n| IDENTIFIER\n| TRUE\n| FALSE\n| LPAREN expression RPAREN\n| expression PLUS expression\n| expression MINUS expression\n| expression MULTIPLY expression\n| expression DIVIDE expression\n| expression EQUAL expression\n| expression NOTEQUAL expression\n| expression GREATER expression\n| expression LESS expression\n| expression GREATER_EQUAL expression\n| expression LESS_EQUAL expressionif_statement : IF LPAREN expression RPAREN LBRACE statements RBRACE else_statementelse_statement : ELSE LBRACE statements RBRACE\n| emptywhile_statement : WHILE LPAREN expression RPAREN LBRACE statements RBRACEprint_statement : PRINT LPAREN expression RPAREN SEMICOLON\n| PRINT LPAREN expression COMMA expression RPAREN SEMICOLONinput_statement : INPUT LPAREN IDENTIFIER RPAREN SEMICOLONfunction_call : IDENTIFIER LPAREN argument_list RPAREN SEMICOLONargument_list : expression\n| expression COMMA argument_list\n| emptyempty :'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,29,],[0,-1,]),'IDENTIFIER':([2,4,5,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,27,28,30,31,34,35,36,37,45,49,50,51,56,57,58,59,60,61,62,63,64,65,66,69,76,89,91,92,93,94,95,96,98,100,101,103,104,105,106,108,109,110,111,],[3,-51,7,-3,7,-2,-14,32,33,-16,-17,-18,-19,-20,-21,-7,-8,-9,-10,38,38,-13,-15,38,38,38,55,38,-4,70,38,-22,38,38,38,38,38,38,38,38,38,38,38,38,-47,70,-5,-6,7,7,-44,-46,7,7,-51,-43,-45,-40,-42,7,7,-41,]),'LBRACE':([3,73,74,107,],[4,94,95,109,]),'CONST':([4,5,6,8,9,10,13,14,15,16,17,18,30,31,49,56,89,92,93,94,95,96,98,100,101,103,104,105,106,108,109,110,111,],[-51,12,-3,12,-2,-14,-16,-17,-18,-19,-20,-21,-13,-15,-4,-22,-47,-5,-6,12,12,-44,-46,12,12,-51,-43,-45,-40,-42,12,12,-41,]),'INT':([4,5,6,8,9,10,13,14,15,16,17,18,30,31,49,56,89,92,93,94,95,96,98,100,101,103,104,105,106,108,109,110,111,],[-51,19,-3,19,-2,-14,-16,-17,-18,-19,-20,-21,-13,-15,-4,-22,-47,-5,-6,19,19,-44,-46,19,19,-51,-43,-45,-40,-42,19,19,-41,]),'FLOAT':([4,5,6,8,9,10,13,14,15,16,17,18,30,31,49,56,89,92,93,94,95,96,98,100,101,103,104,105,106,108,109,110,111,],[-51,20,-3,20,-2,-14,-16,-17,-18,-19,-20,-21,-13,-15,-4,-22,-47,-5,-6,20,20,-44,-46,20,20,-51,-43,-45,-40,-42,20,20,-41,]),'STR':([4,5,6,8,9,10,13,14,15,16,17,18,30,31,49,56,89,92,93,94,95,96,98,100,101,103,104,105,106,108,109,110,111,],[-51,21,-3,21,-2,-14,-16,-17,-18,-19,-20,-21,-13,-15,-4,-22,-47,-5,-6,21,21,-44,-46,21,21,-51,-43,-45,-40,-42,21,21,-41,]),'BOOL':([4,5,6,8,9,10,13,14,15,16,17,18,30,31,49,56,89,92,93,94,95,96,98,100,101,103,104,105,106,108,109,110,111,],[-51,22,-3,22,-2,-14,-16,-17,-18,-19,-20,-21,-13,-15,-4,-22,-47,-5,-6,22,22,-44,-46,22,22,-51,-43,-45,-40,-42,22,22,-41,]),'IF':([4,5,6,8,9,10,13,14,15,16,17,18,30,31,49,56,89,92,93,94,95,96,98,100,101,103,104,105,106,108,109,110,111,],[-51,23,-3,23,-2,-14,-16,-17,-18,-19,-20,-21,-13,-15,-4,-22,-47,-5,-6,23,23,-44,-46,23,23,-51,-43,-45,-40,-42,23,23,-41,]),'WHILE':([4,5,6,8,9,10,13,14,15,16,17,18,30,31,49,56,89,92,93,94,95,96,98,100,101,103,104,105,106,108,109,110,111,],[-51,24,-3,24,-2,-14,-16,-17,-18,-19,-20,-21,-13,-15,-4,-22,-47,-5,-6,24,24,-44,-46,24,24,-51,-43,-45,-40,-42,24,24,-41,]),'PRINT':([4,5,6,8,9,10,13,14,15,16,17,18,30,31,49,56,89,92,93,94,95,96,98,100,101,103,104,105,106,108,109,110,111,],[-51,25,-3,25,-2,-14,-16,-17,-18,-19,-20,-21,-13,-15,-4,-22,-47,-5,-6,25,25,-44,-46,25,25,-51,-43,-45,-40,-42,25,25,-41,]),'INPUT':([4,5,6,8,9,10,13,14,15,16,17,18,30,31,49,56,89,92,93,94,95,96,98,100,101,103,104,105,106,108,109,110,111,],[-51,26,-3,26,-2,-14,-16,-17,-18,-19,-20,-21,-13,-15,-4,-22,-47,-5,-6,26,26,-44,-46,26,26,-51,-43,-45,-40,-42,26,26,-41,]),'ASSIGN':([7,33,],[27,51,]),'LPAREN':([7,23,24,25,26,27,28,34,35,36,45,51,57,58,59,60,61,62,63,64,65,66,69,76,],[28,34,35,36,37,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'RBRACE':([8,9,10,13,14,15,16,17,18,30,31,49,56,89,92,93,96,98,100,101,103,104,105,106,108,110,111,],[29,-15,-14,-16,-17,-18,-19,-20,-21,-13,-15,-4,-22,-47,-5,-6,-44,-46,103,104,-51,-43,-45,-40,-42,111,-41,]),'INTEGER_LITERAL':([27,28,34,35,36,45,51,57,58,59,60,61,62,63,64,65,66,69,76,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'FLOAT_LITERAL':([27,28,34,35,36,45,51,57,58,59,60,61,62,63,64,65,66,69,76,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'STRING_LITERAL':([27,28,34,35,36,45,51,57,58,59,60,61,62,63,64,65,66,69,76,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'TRUE':([27,28,34,35,36,45,51,57,58,59,60,61,62,63,64,65,66,69,76,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'FALSE':([27,28,34,35,36,45,51,57,58,59,60,61,62,63,64,65,66,69,76,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'RPAREN':([28,38,40,41,42,43,44,46,47,48,52,53,54,55,67,69,78,79,80,81,82,83,84,85,86,87,88,90,97,],[-51,-26,-23,-24,-25,-27,-28,68,-48,-50,73,74,75,77,88,-51,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-29,-49,102,]),'SEMICOLON':([32,38,39,40,41,42,43,44,68,70,71,72,75,77,78,79,80,81,82,83,84,85,86,87,88,99,102,],[49,-26,56,-23,-24,-25,-27,-28,89,-11,92,93,96,98,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-29,-12,105,]),'COMMA':([32,38,40,41,42,43,44,47,54,70,78,79,80,81,82,83,84,85,86,87,88,],[50,-26,-23,-24,-25,-27,-28,69,76,91,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-29,]),'PLUS':([38,39,40,41,42,43,44,47,52,53,54,67,72,78,79,80,81,82,83,84,85,86,87,88,97,],[-26,57,-23,-24,-25,-27,-28,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,-29,57,]),'MINUS':([38,39,40,41,42,43,44,47,52,53,54,67,72,78,79,80,81,82,83,84,85,86,87,88,97,],[-26,58,-23,-24,-25,-27,-28,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,-29,58,]),'MULTIPLY':([38,39,40,41,42,43,44,47,52,53,54,67,72,78,79,80,81,82,83,84,85,86,87,88,97,],[-26,59,-23,-24,-25,-27,-28,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,-29,59,]),'DIVIDE':([38,39,40,41,42,43,44,47,52,53,54,67,72,78,79,80,81,82,83,84,85,86,87,88,97,],[-26,60,-23,-24,-25,-27,-28,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,-29,60,]),'EQUAL':([38,39,40,41,42,43,44,47,52,53,54,67,72,78,79,80,81,82,83,84,85,86,87,88,97,],[-26,61,-23,-24,-25,-27,-28,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,-29,61,]),'NOTEQUAL':([38,39,40,41,42,43,44,47,52,53,54,67,72,78,79,80,81,82,83,84,85,86,87,88,97,],[-26,62,-23,-24,-25,-27,-28,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,-29,62,]),'GREATER':([38,39,40,41,42,43,44,47,52,53,54,67,72,78,79,80,81,82,83,84,85,86,87,88,97,],[-26,63,-23,-24,-25,-27,-28,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,-29,63,]),'LESS':([38,39,40,41,42,43,44,47,52,53,54,67,72,78,79,80,81,82,83,84,85,86,87,88,97,],[-26,64,-23,-24,-25,-27,-28,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,-29,64,]),'GREATER_EQUAL':([38,39,40,41,42,43,44,47,52,53,54,67,72,78,79,80,81,82,83,84,85,86,87,88,97,],[-26,65,-23,-24,-25,-27,-28,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,-29,65,]),'LESS_EQUAL':([38,39,40,41,42,43,44,47,52,53,54,67,72,78,79,80,81,82,83,84,85,86,87,88,97,],[-26,66,-23,-24,-25,-27,-28,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,-29,66,]),'ELSE':([103,],[107,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declarations':([4,],[5,]),'empty':([4,28,69,103,],[6,48,48,108,]),'statements':([5,94,95,109,],[8,100,101,110,]),'declaration':([5,8,94,95,100,101,109,110,],[9,31,31,31,31,31,31,31,]),'statement':([5,8,94,95,100,101,109,110,],[10,30,10,10,30,30,10,30,]),'type':([5,8,94,95,100,101,109,110,],[11,11,11,11,11,11,11,11,]),'assignment':([5,8,94,95,100,101,109,110,],[13,13,13,13,13,13,13,13,]),'if_statement':([5,8,94,95,100,101,109,110,],[14,14,14,14,14,14,14,14,]),'while_statement':([5,8,94,95,100,101,109,110,],[15,15,15,15,15,15,15,15,]),'print_statement':([5,8,94,95,100,101,109,110,],[16,16,16,16,16,16,16,16,]),'input_statement':([5,8,94,95,100,101,109,110,],[17,17,17,17,17,17,17,17,]),'function_call':([5,8,94,95,100,101,109,110,],[18,18,18,18,18,18,18,18,]),'expression':([27,28,34,35,36,45,51,57,58,59,60,61,62,63,64,65,66,69,76,],[39,47,52,53,54,67,72,78,79,80,81,82,83,84,85,86,87,47,97,]),'argument_list':([28,69,],[46,90,]),'identifiers':([50,91,],[71,99,]),'else_statement':([103,],[106,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM IDENTIFIER LBRACE declarations statements RBRACE','program',6,'p_program','parser.py',19),
  ('declarations -> declarations declaration','declarations',2,'p_declarations','parser.py',23),
  ('declarations -> empty','declarations',1,'p_declarations','parser.py',24),
  ('declaration -> type IDENTIFIER SEMICOLON','declaration',3,'p_declaration','parser.py',31),
  ('declaration -> type IDENTIFIER COMMA identifiers SEMICOLON','declaration',5,'p_declaration','parser.py',32),
  ('declaration -> CONST IDENTIFIER ASSIGN expression SEMICOLON','declaration',5,'p_declaration','parser.py',33),
  ('type -> INT','type',1,'p_type','parser.py',45),
  ('type -> FLOAT','type',1,'p_type','parser.py',46),
  ('type -> STR','type',1,'p_type','parser.py',47),
  ('type -> BOOL','type',1,'p_type','parser.py',48),
  ('identifiers -> IDENTIFIER','identifiers',1,'p_identifiers','parser.py',52),
  ('identifiers -> IDENTIFIER COMMA identifiers','identifiers',3,'p_identifiers','parser.py',53),
  ('statements -> statements statement','statements',2,'p_statements','parser.py',57),
  ('statements -> statement','statements',1,'p_statements','parser.py',58),
  ('statement -> declaration','statement',1,'p_statement','parser.py',65),
  ('statement -> assignment','statement',1,'p_statement','parser.py',66),
  ('statement -> if_statement','statement',1,'p_statement','parser.py',67),
  ('statement -> while_statement','statement',1,'p_statement','parser.py',68),
  ('statement -> print_statement','statement',1,'p_statement','parser.py',69),
  ('statement -> input_statement','statement',1,'p_statement','parser.py',70),
  ('statement -> function_call','statement',1,'p_statement','parser.py',71),
  ('assignment -> IDENTIFIER ASSIGN expression SEMICOLON','assignment',4,'p_assignment','parser.py',75),
  ('expression -> INTEGER_LITERAL','expression',1,'p_expression','parser.py',80),
  ('expression -> FLOAT_LITERAL','expression',1,'p_expression','parser.py',81),
  ('expression -> STRING_LITERAL','expression',1,'p_expression','parser.py',82),
  ('expression -> IDENTIFIER','expression',1,'p_expression','parser.py',83),
  ('expression -> TRUE','expression',1,'p_expression','parser.py',84),
  ('expression -> FALSE','expression',1,'p_expression','parser.py',85),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression','parser.py',86),
  ('expression -> expression PLUS expression','expression',3,'p_expression','parser.py',87),
  ('expression -> expression MINUS expression','expression',3,'p_expression','parser.py',88),
  ('expression -> expression MULTIPLY expression','expression',3,'p_expression','parser.py',89),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression','parser.py',90),
  ('expression -> expression EQUAL expression','expression',3,'p_expression','parser.py',91),
  ('expression -> expression NOTEQUAL expression','expression',3,'p_expression','parser.py',92),
  ('expression -> expression GREATER expression','expression',3,'p_expression','parser.py',93),
  ('expression -> expression LESS expression','expression',3,'p_expression','parser.py',94),
  ('expression -> expression GREATER_EQUAL expression','expression',3,'p_expression','parser.py',95),
  ('expression -> expression LESS_EQUAL expression','expression',3,'p_expression','parser.py',96),
  ('if_statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE else_statement','if_statement',8,'p_if_statement','parser.py',107),
  ('else_statement -> ELSE LBRACE statements RBRACE','else_statement',4,'p_else_statement','parser.py',111),
  ('else_statement -> empty','else_statement',1,'p_else_statement','parser.py',112),
  ('while_statement -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE','while_statement',7,'p_while_statement','parser.py',119),
  ('print_statement -> PRINT LPAREN expression RPAREN SEMICOLON','print_statement',5,'p_print_statement','parser.py',123),
  ('print_statement -> PRINT LPAREN expression COMMA expression RPAREN SEMICOLON','print_statement',7,'p_print_statement','parser.py',124),
  ('input_statement -> INPUT LPAREN IDENTIFIER RPAREN SEMICOLON','input_statement',5,'p_input_statement','parser.py',131),
  ('function_call -> IDENTIFIER LPAREN argument_list RPAREN SEMICOLON','function_call',5,'p_function_call','parser.py',136),
  ('argument_list -> expression','argument_list',1,'p_argument_list','parser.py',141),
  ('argument_list -> expression COMMA argument_list','argument_list',3,'p_argument_list','parser.py',142),
  ('argument_list -> empty','argument_list',1,'p_argument_list','parser.py',143),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',150),
]
