
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ASSIGN BOOL COMMA CONST DIVIDE ELSE EQUAL FALSE FLOAT FLOAT_LITERAL GREATER GREATER_EQUAL IDENTIFIER IF INPUT INT INTEGER_LITERAL LBRACE LESS LESS_EQUAL LPAREN MINUS MULTIPLY NOT NOTEQUAL PLUS PRINT PROGRAM RBRACE RPAREN SEMICOLON STR STRING_LITERAL TRUE WHILEprogram : PROGRAM IDENTIFIER LBRACE declarations statements RBRACEdeclarations : declarations declaration\n| emptydeclaration : type IDENTIFIER SEMICOLON\n| type IDENTIFIER COMMA identifiers SEMICOLON\n| CONST IDENTIFIER ASSIGN expression SEMICOLONtype : INT\n| FLOAT\n| STR\n| BOOLidentifiers : IDENTIFIER\n| IDENTIFIER COMMA identifiersstatements : statements statement\n| statementstatement : declaration\n| assignment\n| if_statement\n| while_statement\n| print_statement\n| input_statement\n| function_callassignment : IDENTIFIER ASSIGN expression SEMICOLONexpression : INTEGER_LITERAL\n| FLOAT_LITERAL\n| STRING_LITERAL\n| IDENTIFIER\n| TRUE\n| FALSE\n| expression PLUS expression\n| expression MINUS expression\n| expression MULTIPLY expression\n| expression DIVIDE expression\n| expression EQUAL expression\n| expression NOTEQUAL expression\n| expression GREATER expression\n| expression LESS expression\n| expression GREATER_EQUAL expression\n| expression LESS_EQUAL expressionif_statement : IF LPAREN expression RPAREN LBRACE statements RBRACE else_statementelse_statement : ELSE LBRACE statements RBRACE\n| emptywhile_statement : WHILE LPAREN expression RPAREN LBRACE statements RBRACEprint_statement : PRINT LPAREN expression RPAREN SEMICOLONinput_statement : INPUT LPAREN IDENTIFIER COMMA IDENTIFIER RPAREN SEMICOLONfunction_call : IDENTIFIER LPAREN argument_list RPAREN SEMICOLONargument_list : expression\n| expression COMMA argument_list\n| emptyempty :'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,29,],[0,-1,]),'IDENTIFIER':([2,4,5,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,27,28,30,31,34,35,36,37,48,49,50,55,56,57,58,59,60,61,62,63,64,65,67,74,85,87,88,89,90,91,92,95,96,98,99,100,101,103,104,105,106,],[3,-49,7,-3,7,-2,-14,32,33,-16,-17,-18,-19,-20,-21,-7,-8,-9,-10,38,38,-13,-15,38,38,38,54,-4,68,38,-22,38,38,38,38,38,38,38,38,38,38,38,93,-45,68,-5,-6,7,7,-43,7,7,-49,-42,-44,-39,-41,7,7,-40,]),'LBRACE':([3,71,72,102,],[4,90,91,104,]),'CONST':([4,5,6,8,9,10,13,14,15,16,17,18,30,31,48,55,85,88,89,90,91,92,95,96,98,99,100,101,103,104,105,106,],[-49,12,-3,12,-2,-14,-16,-17,-18,-19,-20,-21,-13,-15,-4,-22,-45,-5,-6,12,12,-43,12,12,-49,-42,-44,-39,-41,12,12,-40,]),'INT':([4,5,6,8,9,10,13,14,15,16,17,18,30,31,48,55,85,88,89,90,91,92,95,96,98,99,100,101,103,104,105,106,],[-49,19,-3,19,-2,-14,-16,-17,-18,-19,-20,-21,-13,-15,-4,-22,-45,-5,-6,19,19,-43,19,19,-49,-42,-44,-39,-41,19,19,-40,]),'FLOAT':([4,5,6,8,9,10,13,14,15,16,17,18,30,31,48,55,85,88,89,90,91,92,95,96,98,99,100,101,103,104,105,106,],[-49,20,-3,20,-2,-14,-16,-17,-18,-19,-20,-21,-13,-15,-4,-22,-45,-5,-6,20,20,-43,20,20,-49,-42,-44,-39,-41,20,20,-40,]),'STR':([4,5,6,8,9,10,13,14,15,16,17,18,30,31,48,55,85,88,89,90,91,92,95,96,98,99,100,101,103,104,105,106,],[-49,21,-3,21,-2,-14,-16,-17,-18,-19,-20,-21,-13,-15,-4,-22,-45,-5,-6,21,21,-43,21,21,-49,-42,-44,-39,-41,21,21,-40,]),'BOOL':([4,5,6,8,9,10,13,14,15,16,17,18,30,31,48,55,85,88,89,90,91,92,95,96,98,99,100,101,103,104,105,106,],[-49,22,-3,22,-2,-14,-16,-17,-18,-19,-20,-21,-13,-15,-4,-22,-45,-5,-6,22,22,-43,22,22,-49,-42,-44,-39,-41,22,22,-40,]),'IF':([4,5,6,8,9,10,13,14,15,16,17,18,30,31,48,55,85,88,89,90,91,92,95,96,98,99,100,101,103,104,105,106,],[-49,23,-3,23,-2,-14,-16,-17,-18,-19,-20,-21,-13,-15,-4,-22,-45,-5,-6,23,23,-43,23,23,-49,-42,-44,-39,-41,23,23,-40,]),'WHILE':([4,5,6,8,9,10,13,14,15,16,17,18,30,31,48,55,85,88,89,90,91,92,95,96,98,99,100,101,103,104,105,106,],[-49,24,-3,24,-2,-14,-16,-17,-18,-19,-20,-21,-13,-15,-4,-22,-45,-5,-6,24,24,-43,24,24,-49,-42,-44,-39,-41,24,24,-40,]),'PRINT':([4,5,6,8,9,10,13,14,15,16,17,18,30,31,48,55,85,88,89,90,91,92,95,96,98,99,100,101,103,104,105,106,],[-49,25,-3,25,-2,-14,-16,-17,-18,-19,-20,-21,-13,-15,-4,-22,-45,-5,-6,25,25,-43,25,25,-49,-42,-44,-39,-41,25,25,-40,]),'INPUT':([4,5,6,8,9,10,13,14,15,16,17,18,30,31,48,55,85,88,89,90,91,92,95,96,98,99,100,101,103,104,105,106,],[-49,26,-3,26,-2,-14,-16,-17,-18,-19,-20,-21,-13,-15,-4,-22,-45,-5,-6,26,26,-43,26,26,-49,-42,-44,-39,-41,26,26,-40,]),'ASSIGN':([7,33,],[27,50,]),'LPAREN':([7,23,24,25,26,],[28,34,35,36,37,]),'RBRACE':([8,9,10,13,14,15,16,17,18,30,31,48,55,85,88,89,92,95,96,98,99,100,101,103,105,106,],[29,-15,-14,-16,-17,-18,-19,-20,-21,-13,-15,-4,-22,-45,-5,-6,-43,98,99,-49,-42,-44,-39,-41,106,-40,]),'INTEGER_LITERAL':([27,28,34,35,36,50,56,57,58,59,60,61,62,63,64,65,67,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'FLOAT_LITERAL':([27,28,34,35,36,50,56,57,58,59,60,61,62,63,64,65,67,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'STRING_LITERAL':([27,28,34,35,36,50,56,57,58,59,60,61,62,63,64,65,67,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'TRUE':([27,28,34,35,36,50,56,57,58,59,60,61,62,63,64,65,67,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'FALSE':([27,28,34,35,36,50,56,57,58,59,60,61,62,63,64,65,67,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'RPAREN':([28,38,40,41,42,43,44,45,46,47,51,52,53,67,75,76,77,78,79,80,81,82,83,84,86,93,],[-49,-26,-23,-24,-25,-27,-28,66,-46,-48,71,72,73,-49,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-47,97,]),'SEMICOLON':([32,38,39,40,41,42,43,44,66,68,69,70,73,75,76,77,78,79,80,81,82,83,84,94,97,],[48,-26,55,-23,-24,-25,-27,-28,85,-11,88,89,92,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-12,100,]),'COMMA':([32,38,40,41,42,43,44,46,54,68,75,76,77,78,79,80,81,82,83,84,],[49,-26,-23,-24,-25,-27,-28,67,74,87,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,]),'PLUS':([38,39,40,41,42,43,44,46,51,52,53,70,75,76,77,78,79,80,81,82,83,84,],[-26,56,-23,-24,-25,-27,-28,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'MINUS':([38,39,40,41,42,43,44,46,51,52,53,70,75,76,77,78,79,80,81,82,83,84,],[-26,57,-23,-24,-25,-27,-28,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'MULTIPLY':([38,39,40,41,42,43,44,46,51,52,53,70,75,76,77,78,79,80,81,82,83,84,],[-26,58,-23,-24,-25,-27,-28,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'DIVIDE':([38,39,40,41,42,43,44,46,51,52,53,70,75,76,77,78,79,80,81,82,83,84,],[-26,59,-23,-24,-25,-27,-28,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,]),'EQUAL':([38,39,40,41,42,43,44,46,51,52,53,70,75,76,77,78,79,80,81,82,83,84,],[-26,60,-23,-24,-25,-27,-28,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'NOTEQUAL':([38,39,40,41,42,43,44,46,51,52,53,70,75,76,77,78,79,80,81,82,83,84,],[-26,61,-23,-24,-25,-27,-28,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,]),'GREATER':([38,39,40,41,42,43,44,46,51,52,53,70,75,76,77,78,79,80,81,82,83,84,],[-26,62,-23,-24,-25,-27,-28,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,]),'LESS':([38,39,40,41,42,43,44,46,51,52,53,70,75,76,77,78,79,80,81,82,83,84,],[-26,63,-23,-24,-25,-27,-28,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,]),'GREATER_EQUAL':([38,39,40,41,42,43,44,46,51,52,53,70,75,76,77,78,79,80,81,82,83,84,],[-26,64,-23,-24,-25,-27,-28,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,]),'LESS_EQUAL':([38,39,40,41,42,43,44,46,51,52,53,70,75,76,77,78,79,80,81,82,83,84,],[-26,65,-23,-24,-25,-27,-28,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,]),'ELSE':([98,],[102,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declarations':([4,],[5,]),'empty':([4,28,67,98,],[6,47,47,103,]),'statements':([5,90,91,104,],[8,95,96,105,]),'declaration':([5,8,90,91,95,96,104,105,],[9,31,31,31,31,31,31,31,]),'statement':([5,8,90,91,95,96,104,105,],[10,30,10,10,30,30,10,30,]),'type':([5,8,90,91,95,96,104,105,],[11,11,11,11,11,11,11,11,]),'assignment':([5,8,90,91,95,96,104,105,],[13,13,13,13,13,13,13,13,]),'if_statement':([5,8,90,91,95,96,104,105,],[14,14,14,14,14,14,14,14,]),'while_statement':([5,8,90,91,95,96,104,105,],[15,15,15,15,15,15,15,15,]),'print_statement':([5,8,90,91,95,96,104,105,],[16,16,16,16,16,16,16,16,]),'input_statement':([5,8,90,91,95,96,104,105,],[17,17,17,17,17,17,17,17,]),'function_call':([5,8,90,91,95,96,104,105,],[18,18,18,18,18,18,18,18,]),'expression':([27,28,34,35,36,50,56,57,58,59,60,61,62,63,64,65,67,],[39,46,51,52,53,70,75,76,77,78,79,80,81,82,83,84,46,]),'argument_list':([28,67,],[45,86,]),'identifiers':([49,87,],[69,94,]),'else_statement':([98,],[101,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM IDENTIFIER LBRACE declarations statements RBRACE','program',6,'p_program','parser.py',19),
  ('declarations -> declarations declaration','declarations',2,'p_declarations','parser.py',23),
  ('declarations -> empty','declarations',1,'p_declarations','parser.py',24),
  ('declaration -> type IDENTIFIER SEMICOLON','declaration',3,'p_declaration','parser.py',31),
  ('declaration -> type IDENTIFIER COMMA identifiers SEMICOLON','declaration',5,'p_declaration','parser.py',32),
  ('declaration -> CONST IDENTIFIER ASSIGN expression SEMICOLON','declaration',5,'p_declaration','parser.py',33),
  ('type -> INT','type',1,'p_type','parser.py',45),
  ('type -> FLOAT','type',1,'p_type','parser.py',46),
  ('type -> STR','type',1,'p_type','parser.py',47),
  ('type -> BOOL','type',1,'p_type','parser.py',48),
  ('identifiers -> IDENTIFIER','identifiers',1,'p_identifiers','parser.py',52),
  ('identifiers -> IDENTIFIER COMMA identifiers','identifiers',3,'p_identifiers','parser.py',53),
  ('statements -> statements statement','statements',2,'p_statements','parser.py',57),
  ('statements -> statement','statements',1,'p_statements','parser.py',58),
  ('statement -> declaration','statement',1,'p_statement','parser.py',65),
  ('statement -> assignment','statement',1,'p_statement','parser.py',66),
  ('statement -> if_statement','statement',1,'p_statement','parser.py',67),
  ('statement -> while_statement','statement',1,'p_statement','parser.py',68),
  ('statement -> print_statement','statement',1,'p_statement','parser.py',69),
  ('statement -> input_statement','statement',1,'p_statement','parser.py',70),
  ('statement -> function_call','statement',1,'p_statement','parser.py',71),
  ('assignment -> IDENTIFIER ASSIGN expression SEMICOLON','assignment',4,'p_assignment','parser.py',75),
  ('expression -> INTEGER_LITERAL','expression',1,'p_expression','parser.py',80),
  ('expression -> FLOAT_LITERAL','expression',1,'p_expression','parser.py',81),
  ('expression -> STRING_LITERAL','expression',1,'p_expression','parser.py',82),
  ('expression -> IDENTIFIER','expression',1,'p_expression','parser.py',83),
  ('expression -> TRUE','expression',1,'p_expression','parser.py',84),
  ('expression -> FALSE','expression',1,'p_expression','parser.py',85),
  ('expression -> expression PLUS expression','expression',3,'p_expression','parser.py',86),
  ('expression -> expression MINUS expression','expression',3,'p_expression','parser.py',87),
  ('expression -> expression MULTIPLY expression','expression',3,'p_expression','parser.py',88),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression','parser.py',89),
  ('expression -> expression EQUAL expression','expression',3,'p_expression','parser.py',90),
  ('expression -> expression NOTEQUAL expression','expression',3,'p_expression','parser.py',91),
  ('expression -> expression GREATER expression','expression',3,'p_expression','parser.py',92),
  ('expression -> expression LESS expression','expression',3,'p_expression','parser.py',93),
  ('expression -> expression GREATER_EQUAL expression','expression',3,'p_expression','parser.py',94),
  ('expression -> expression LESS_EQUAL expression','expression',3,'p_expression','parser.py',95),
  ('if_statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE else_statement','if_statement',8,'p_if_statement','parser.py',104),
  ('else_statement -> ELSE LBRACE statements RBRACE','else_statement',4,'p_else_statement','parser.py',108),
  ('else_statement -> empty','else_statement',1,'p_else_statement','parser.py',109),
  ('while_statement -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE','while_statement',7,'p_while_statement','parser.py',116),
  ('print_statement -> PRINT LPAREN expression RPAREN SEMICOLON','print_statement',5,'p_print_statement','parser.py',120),
  ('input_statement -> INPUT LPAREN IDENTIFIER COMMA IDENTIFIER RPAREN SEMICOLON','input_statement',7,'p_input_statement','parser.py',124),
  ('function_call -> IDENTIFIER LPAREN argument_list RPAREN SEMICOLON','function_call',5,'p_function_call','parser.py',130),
  ('argument_list -> expression','argument_list',1,'p_argument_list','parser.py',135),
  ('argument_list -> expression COMMA argument_list','argument_list',3,'p_argument_list','parser.py',136),
  ('argument_list -> empty','argument_list',1,'p_argument_list','parser.py',137),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',144),
]
